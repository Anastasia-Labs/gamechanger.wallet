{"lang.json":{"type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n","pattern":"^\\{(.|[\\r\\n])*\\}$","anyOf":[{"type":"string","title":"native","description":"Reserved language functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])return\\s*\\(.*\\)(?![\\w_])","title":"return","description":"\n\n###  *function* **return(**result: *`any`* **):** *`void`* ;\n\n\nThe function **return** allows you to stop execution of inline code block at that position and return a value as `result` of entire block execution.\n\n\n#### Arguments\n\n- **result** (*`any`*) - value to return **[OPTIONAL]**\n\n\n\n\n#### More\nThe function **fail()** is similar but halts the execution of entire script with failure instead.\n\n\n","examples":["{ return(5) }","{ return('Hello World!') }","{ return(get('cache.myAddress')) }"]},{"type":"string","pattern":"(?<![\\w_])fail\\s*\\(.*\\)(?![\\w_])","title":"fail","description":"\n\n###  *function* **fail(**message: *`string`* **):** *`void`* ;\n\n\nThe function **fail** allows you to stop execution of inline code block at that position and also entire script execution in error state. \n                User can provide a `message` as argument to became the message of the error to be thrown.\n\n\n#### Arguments\n\n- **message** (*`string`*) - error message to throw **[OPTIONAL]**\n\n\n\n\n#### More\nThe function **return()** is similar but halts the execution of inline code block successfully, returning a value.\n\n\n","examples":["{ fail('This is an error message') }","{ fail() }"]}]},{"type":"string","title":"system","description":"System functions for memory management, logging, etc..","anyOf":[{"type":"string","pattern":"(?<![\\w_])set\\s*\\(.*\\)(?![\\w_])","title":"set","description":"\n\n###  *function* **set(**path: *`string`*, value: *`any`* **):** *`any`* ;\n\n\nThe function **set** allows you to set arbitrary data on script context for later reuse.\n\n\n#### Arguments\n\n- **path** (*`string`*) - path of the value to set \n- **value** (*`any`*) - variable to store \n\n\n\n\n#### More\nUse **get()** with `path='global.<path>'` to access and reuse the value later\n\n\n","examples":["{ set('temp1','Hello World!') }","{ set('temp2',get('global.temp1')) }"]},{"type":"string","pattern":"(?<![\\w_])get\\s*\\(.*\\)(?![\\w_])","title":"get","description":"\n\n###  *function* **get(**path: *`string`* **):** *`any`* ;\n\n\nThe function **get** allows you to get arbitrary data from script context.\n\n\n#### Arguments\n\n- **path** (*`string`*) - path of the value to retrieve \n\n\n\n\n#### More\nUse **set()** function to declare user variables inside a `global` object which you can later access using **get()**\n\n\n","examples":["{ get('cache.myAddress') }","{ get('cache.buildTransaction.txHex') }","{ set('temp1','Hello World!'); get('global.temp1'); }"]},{"type":"string","pattern":"(?<![\\w_])console\\s*\\(.*\\)(?![\\w_])","title":"console","description":"\n\n###  *function* **console(**type: *`'log'|'info'|'warn'|'error'`*, ...values: *`any`* **):** *`void`* ;\n\n\nDumps to console one or several `values`, which can be string messages or of any type\n\n\n#### Arguments\n\n- **type** (*`'log'|'info'|'warn'|'error'`*) - value to pretty print in the logs \n- **...values** (*`any`*) - value to pretty print in the logs **[REST]**\n\n\n\n\n\n","examples":["{ console('log','This is a log') }","{ console('info','This is an information') }","{ console('warn','This is a warning') }","{ console('error','This is an error') }","{ console('info','Hello web3 user!','Your address is:', get('cache.myAddress')) }","{ console('log',get('global.temp1')) }"]},{"type":"string","pattern":"(?<![\\w_])delay\\s*\\(.*\\)(?![\\w_])","title":"delay","description":"\n\n### **[DEPRECATED]** *function* **delay(**timeout: *`number`* **):** *`void`* ;\n\n\nPauses the execution for `timeout` milliseconds.\n\n\n#### Arguments\n\n- **timeout** (*`number`*) - number of milliseconds for the timeout \n\n\n\n\n\n"}]},{"type":"string","title":"string","description":"String manipulation functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])truncate\\s*\\(.*\\)(?![\\w_])","title":"truncate","description":"\n\n###  *function* **truncate(**value: *`string`*, prefixLength: *`number`*, suffixLength: *`number`*, separator: *`string`* **):** *`string`* ;\n\n\nTruncates a string from start to `prefixLength` characters, attaches a `separator` string, and finally adds the last `suffixLength` characters of the string\nUseful for truncating long texts, or hashes and addresses when you want to keep the beginning and the end of them and discard the middle.\n                \n\n\n#### Arguments\n\n- **value** (*`string`*) - utf-8 string to be truncated \n- **prefixLength** (*`number`*) - initial number of characters to be included in resulting string \n- **suffixLength** (*`number`*) - final number of characters to be included in resulting string \n- **separator** (*`string`*) - string to be included between prefix and suffix parts of the string \n\n\n\n\n#### More\n##### Example: \n\naddr1qzk45...kwg (`prefixLength`=10 ,`suffixLength`=3, `separator`=\"...\")\n\n\n"},{"type":"string","pattern":"(?<![\\w_])replaceAll\\s*\\(.*\\)(?![\\w_])","title":"replaceAll","description":"\n\n###  *function* **replaceAll(**text: *`string`*, match: *`string`*, value: *`string`* **):** *`string`* ;\n\n\nReplaces all `match` occurrences inside `text` by `value`\n\n\n#### Arguments\n\n- **text** (*`string`*) - utf-8 string where to search and replace \n- **match** (*`string`*) - utf-8 exact string that will be searched for and replaced by `value` \n- **value** (*`string`*) - utf-8 string value to replace with \n\n\n\n\n\n"}]},{"type":"string","title":"array","description":"Array manipulation functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])getArray\\s*\\(.*\\)(?![\\w_])","title":"getArray","description":"\n\n###  *function* **getArray(**...values: *`any`* **):** *`array`* ;\n\n\nReturns an array with each provided argument as an item\n\n\n#### Arguments\n\n- **...values** (*`any`*) - items of the array of any type **[REST]**\n\n\n\n\n#### More\nbase\n\n\n","examples":["{ getArray('apple','banana',43, get('cache.address')) }"]}]},{"type":"string","title":"encoding","description":"Encoding and decoding functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])jsonToObj\\s*\\(.*\\)(?![\\w_])","title":"jsonToObj","description":"\n\n###  *function* **jsonToObj(**value: *`string`* **):** *`any`* ;\n\n\nParses a JSON string and returns a value of JSON-supported type\n\n\n#### Arguments\n\n- **value** (*`string`*) - string value to parse, must be a valid JSON string \n\n\n\n\n#### More\nUse **objToJson()** function to serialize JSON\n\n\n"},{"type":"string","pattern":"(?<![\\w_])objToJson\\s*\\(.*\\)(?![\\w_])","title":"objToJson","description":"\n\n###  *function* **objToJson(**value: *`any`* **):** *`string`* ;\n\n\nTurns a value of JSON-supported type into a JSON string\n\n\n#### Arguments\n\n- **value** (*`any`*) - value to serialize as JSON string \n\n\n\n\n#### More\nUse **jsonToObj()** function to parse JSON\n\n\n"},{"type":"string","pattern":"(?<![\\w_])strToHex\\s*\\(.*\\)(?![\\w_])","title":"strToHex","description":"\n\n###  *function* **strToHex(**value: *`string`* **):** *`string`* ;\n\n\nEncodes a utf-8 text string into hexadecimal string\n\n\n#### Arguments\n\n- **value** (*`string`*) - utf-8 text string \n\n\n\n\n#### More\nUse **hexToStr()** function to decode from hexadecimal encoding\n\n\n"},{"type":"string","pattern":"(?<![\\w_])hexToStr\\s*\\(.*\\)(?![\\w_])","title":"hexToStr","description":"\n\n###  *function* **hexToStr(**value: *`string`* **):** *`string`* ;\n\n\nDecodes an hexadecimal string into the former utf-8 text string\n\n\n#### Arguments\n\n- **value** (*`string`*) - hexadecimal encoded string \n\n\n\n\n#### More\nUse **strToHex()** function to encode using hexadecimal encoding\n\n\n"},{"type":"string","pattern":"(?<![\\w_])strToBase64\\s*\\(.*\\)(?![\\w_])","title":"strToBase64","description":"\n\n###  *function* **strToBase64(**value: *`string`* **):** *`string`* ;\n\n\nEncodes a utf-8 text string into base64 string\n\n\n#### Arguments\n\n- **value** (*`string`*) - utf-8 text string \n\n\n\n\n#### More\nUse **base64ToStr()** function to decode from base64 encoding\n\n\n"},{"type":"string","pattern":"(?<![\\w_])base64ToStr\\s*\\(.*\\)(?![\\w_])","title":"base64ToStr","description":"\n\n###  *function* **base64ToStr(**value: *`string`* **):** *`string`* ;\n\n\nDecodes a base64 string into a utf-8 text string\n\n\n#### Arguments\n\n- **value** (*`string`*) - base64 encoded string \n\n\n\n\n#### More\nUse **strToBase64()** function to encode using base64 encoding\n\n\n"},{"type":"string","pattern":"(?<![\\w_])strToMetadataStr\\s*\\(.*\\)(?![\\w_])","title":"strToMetadataStr","description":"\n\n###  *function* **strToMetadataStr(**value: *`string`* **):** *`string|string[]`* ;\n\n\nAutomatically splits a utf-8 text string into a list of 64 bytes long strings if `value` length is bigger than 64 bytes\nOtherwise, it returns the original string\n                \nStrings in Cardano transaction's auxiliary data (metadata) can't be longer than 64 bytes. \nMany standards use a list of short strings as a workaround.\n                \n\n\n#### Arguments\n\n- **value** (*`string`*) - utf-8 text to be adapted for metadata usage \n\n\n\n\n#### More\nUse **metadataStrToStr()** function to convert back to string a metadata string\n\n\n"},{"type":"string","pattern":"(?<![\\w_])metadataStrToStr\\s*\\(.*\\)(?![\\w_])","title":"metadataStrToStr","description":"\n\n###  *function* **metadataStrToStr(**value: *`string|string[]`* **):** *`string`* ;\n\n\nIf a list of strings ( produced by `strToMetadataStr` ) is provided, joins it into a single string\nIf a string is provided, returns the string\n\nStrings in transaction's auxiliary data (metadata) can't be longer than 64 bytes. \nMany standards use a list of short strings as a workaround.\n                \n\n\n#### Arguments\n\n- **value** (*`string|string[]`*) - string or list of strings produced by **strToMetadataStr()** \n\n\n\n\n#### More\nUse **strToMetadataStr()** function to convert a string into a metadata string\n\n\n"}]},{"type":"string","title":"crypto","description":"Cryptographic functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])getAddressInfo\\s*\\(.*\\)(?![\\w_])","title":"getAddressInfo","description":"\n\n###  *function* **getAddressInfo(**address: *`string`* **):** *`object`* ;\n\n\nParses a Cardano `address` and returns information as an object with many useful properties\n\n\n#### Arguments\n\n- **address** (*`string`*) - a valid Cardano address \n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])sha512\\s*\\(.*\\)(?![\\w_])","title":"sha512","description":"\n\n###  *function* **sha512(**data: *`string`* **):** *`string`* ;\n\n\nCalculates SHA512 hash of `data` string \n\n\n#### Arguments\n\n- **data** (*`string`*) - utf-8 string to be hashed \n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])sha256\\s*\\(.*\\)(?![\\w_])","title":"sha256","description":"\n\n###  *function* **sha256(**data: *`string`* **):** *`string`* ;\n\n\nCalculates SHA256 hash of `data` string \n\n\n#### Arguments\n\n- **data** (*`string`*) - utf-8 string to be hashed \n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])sha1\\s*\\(.*\\)(?![\\w_])","title":"sha1","description":"\n\n###  *function* **sha1(**data: *`string`* **):** *`string`* ;\n\n\nCalculates SHA1 hash of `data` string \n\n\n#### Arguments\n\n- **data** (*`string`*) - utf-8 string to be hashed \n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])md5\\s*\\(.*\\)(?![\\w_])","title":"md5","description":"\n\n###  *function* **md5(**data: *`string`* **):** *`string`* ;\n\n\nCalculates MD5 hash of `data` string \n\n\n#### Arguments\n\n- **data** (*`string`*) - utf-8 string to be hashed \n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])uuid\\s*\\(.*\\)(?![\\w_])","title":"uuid","description":"\n\n###  *function* **uuid(** **):** *`string`* ;\n\n\nGenerates a random RFC4122 UUID v4\n\n\n#### Arguments\n    none\n\n\n\n"}]},{"type":"string","title":"math","description":"Arithmetic functions","anyOf":[{"type":"string","pattern":"(?<![\\w_])addBigNum\\s*\\(.*\\)(?![\\w_])","title":"addBigNum","description":"\n\n###  *function* **addBigNum(**value: *`string|number`*, ...addends: *`string|number`* **):** *`string`* ;\n\n\nAdds `extraArgs` numbers to an initial `value`. \n\nBigNum are big positive integers provided as strings. \nThis function also convert numbers on arguments into BigNum string  \n\nReturns the sum as a BigNum string.\n                \n\n\n#### Arguments\n\n- **value** (*`string|number`*) - initial value (BigNum) \n- **...addends** (*`string|number`*) - value or values to be added (BigNum) **[REST]**\n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])subBigNum\\s*\\(.*\\)(?![\\w_])","title":"subBigNum","description":"\n\n###  *function* **subBigNum(**value: *`string|number`*, ...subtrahends: *`string|number`* **):** *`string`* ;\n\n\nSubtracts `subtrahends` numbers from an initial `value` minuend. Fails on underflow.\n\nBigNum are big positive integers provided as strings. \nThis function also convert numbers on arguments into BigNum string  \n    \nReturns the subtraction as a BigNum string. \n                \n\n\n#### Arguments\n\n- **value** (*`string|number`*) - minuend, initial value (BigNum) \n- **...subtrahends** (*`string|number`*) - value or values to be subtracted (BigNum) **[REST]**\n\n\n\n\n\n"},{"type":"string","pattern":"(?<![\\w_])mulBigNum\\s*\\(.*\\)(?![\\w_])","title":"mulBigNum","description":"\n\n###  *function* **mulBigNum(**value: *`string|number`*, ...multipliers: *`string|number`* **):** *`string`* ;\n\n\nMultiplies `multipliers` numbers to an initial `value`. \n    \nBigNum are big positive integers provided as strings. \nThis function also convert numbers on arguments into BigNum string  \n\nReturns the multiplication as a BigNum string.\n                \n\n\n#### Arguments\n\n- **value** (*`string|number`*) - initial value (BigNum) \n- **...multipliers** (*`string|number`*) - value or values to be multiplied with (BigNum) **[REST]**\n\n\n\n\n\n"}]}],"$id":"lang.json"},"permissions.json":{"$id":"permissions.json","type":"object","title":"Permissions definitions","description":"Permissions names, description and properties that are used by functions and GameChanger Wallet GCScript interpreter on every dapp connection.","properties":{"getNetworkData":{"title":"get data from network","description":"fetch data from backend nodes","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"await":{"title":"wait for conditions","description":"waits for conditions like timers or asset balances","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"setTerminalMode":{"title":"set terminal mode","description":"adapts the application for public terminal devices","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"createWallet":{"title":"create wallet","description":"create wallets in behalf of you or someone else","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"shareWorkspacePublicKeys":{"title":"share public keys","description":"share your current workspace public keys","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"shareWorkspaceAddresses":{"title":"share addresses","description":"share your current workspace addresses","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"setCurrentWorkspace":{"title":"set current workspace","description":"set your current wallet workspace","type":"object","properties":{"severity":{"type":"string","const":"medium"},"confirmOnRuntime":{"type":"boolean","const":true}}},"shareWalletAddress":{"title":"share address","description":"share one of your wallet addresses","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"shareAddressIdentity":{"title":"share address identity","description":"share one of your wallet addresses associated default native script","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"createVolatileAddress":{"title":"create volatile address","description":"create an address that may not be reconstructed again, a potential loss of funds","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"shareWalletName":{"title":"share name","description":"share one of your wallet names","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"shareWalletPublicKey":{"title":"share public key","description":"share your wallet public key","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"deriveVolatileKeys":{"title":"generate volatile keys","description":"derive a volatile private and public key pair from your master private key, and this derivation may not be reconstructed again, a potential loss of signability, minting, staking or spending capability. Will only share public keys, not private ones.","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"createCertificates":{"title":"create certificates","description":"create certificates, required for staking operations","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"createNativeScripts":{"title":"create native scripts","description":"create native scripts, required for token minting and multisig operations","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"createPlutusScripts":{"title":"create plutus scripts","description":"create plutus scripts, required for a huge variety of Cardano features","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"encrypt":{"title":"encrypt data or code","description":"encrypt data (maybe code) with a password","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"decrypt":{"title":"decrypt data or code","description":"decrypt data (maybe code) with a password","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"signData":{"title":"sign data","description":"use one of your wallet private keys to create a signature based on arbitrary data","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"signTx":{"title":"sign transaction","description":"use wallet private keys to sign a transaction","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"signTxs":{"title":"sign transactions","description":"use wallet private keys to sign one or more transactions. Review each transaction in detail, once signed it cannot be undone.","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"verify":{"title":"verify signature","description":"use one of your wallet public keys to verify if a signature has been created using it's associated private key","type":"object","properties":{"severity":{"type":"string","const":"medium"},"confirmOnRuntime":{"type":"boolean","const":true}}},"buildTx":{"title":"build transaction","description":"build a transaction to spend funds, mint tokens, delegate stake or execute smart contracts","type":"object","properties":{"severity":{"type":"string","const":"medium"},"confirmOnRuntime":{"type":"boolean","const":true}}},"submitTx":{"title":"submit transaction","description":"submit to the blockchain a signed transaction","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"awaitTx":{"title":"await transaction","description":"wait for a transaction to get confirmed by the network","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"cryptography":{"title":"cryptography","description":"perform cryptographic calculations","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"executeExternalScript":{"title":"execute external code","description":"fetch and execute external block of code inside the current script","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnPreprocessor":{"type":"boolean","const":true}}},"useExternalData":{"title":"use external data","description":"fetch and include external data inside the current script to be used by the code","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnPreprocessor":{"type":"boolean","const":true}}},"useConstantData":{"title":"use constant data","description":"use data contained inside the current script","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"executeScript":{"title":"execute code","description":"execute a block of code to perform some batch operations like sharing wallet addresses or build and sign transactions","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"signTx:spend:input":{"title":"spend assets","description":"sign a transaction that once submitted will spend assets","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:spend:input:script":{"title":"unlock assets","description":"sign a transaction that once submitted will spend assets locked on a smart contract or simple contract","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:spend:input:externally":{"title":"spend third party assets","description":"sign a transaction that once submitted will spend third party assets","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:spend:collateral":{"title":"may spend assets","description":"sign a transaction that once submitted will spend ADA if one of it's smart contracts fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:spend:collateral:script":{"title":"may spend locked assets","description":"sign a transaction that once submitted will spend ADA locked on a smart contract or simple contract, if one of it's smart contracts fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:spend:collateral:externally":{"title":"may spend third party assets","description":"sign a transaction that once submitted will spend third party ADA if one of it's smart contracts fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:reference:input":{"title":"reference eUTXO","description":"sign a transaction that once submitted will reference a eUTXO information without spending it","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"signTx:send:script":{"title":"lock assets","description":"sign a transaction that once submitted will lock assets on a smart contract or shared treasury address","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:send:externally":{"title":"send assets","description":"sign a transaction that once submitted will send assets to a third party address","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:send:plutusData":{"title":"send data and assets","description":"sign a transaction that once submitted will send assets with data attached","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:send:nativeScript":{"title":"send a script and assets","description":"sign a transaction that once submitted will send assets with a native script attached","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:send:plutusScript":{"title":"send a script and assets","description":"sign a transaction that once submitted will send assets with a plutus script attached","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:sendCollateralReturn:script":{"title":"may lock assets","description":"sign a transaction that once submitted will lock assets on a smart contract or shared treasury address if one of it's smart contract fails some validation","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:sendCollateralReturn:externally":{"title":"may send assets","description":"sign a transaction that once submitted will send assets to a third party address if one of it's smart contract fails some validation","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:sendCollateralReturn:plutusData":{"title":"may send data and assets","description":"sign a transaction that once submitted will send assets with data attached if one of it's smart contract fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:sendCollateralReturn:nativeScript":{"title":"may send a script and assets","description":"sign a transaction that once submitted will send assets with a native script attached if one of it's smart contract fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:sendCollateralReturn:plutusScript":{"title":"may send a script and assets","description":"sign a transaction that once submitted will send assets with a plutus script attached if one of it's smart contract fails some validation","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:reward":{"title":"claim staking rewards","description":"sign a transaction that once submitted will withdraw some staking rewards","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:reward:script":{"title":"unlock staking rewards","description":"sign a transaction that once submitted will withdraw some staking rewards from a smart contract or shared treasury address","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:reward:externally":{"title":"claim other's staking rewards","description":"sign a transaction that once submitted will withdraw some staking rewards from a third party address","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:mint":{"title":"mint assets","description":"sign a transaction that once submitted will mint native assets (tokens,NFTs,etc..)","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:burn":{"title":"burn assets","description":"sign a transaction that once submitted will burn native assets (tokens,NFTs,etc..)","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:cert:stakeRegistration":{"title":"register stake","description":"sign a transaction that once submitted will register stake, usually to delegate it later","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:cert:stakeDeregistration":{"title":"deregister stake","description":"sign a transaction that once submitted will deregister stake","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:cert:stakeDelegation":{"title":"delegate stake","description":"sign a transaction that once submitted will delegate stake to a stake pool","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:cert:poolRegistration":{"title":"register stake pool","description":"sign a transaction that once submitted will register a stake pool","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:cert:poolRetirement":{"title":"retire stake pool","description":"sign a transaction that once submitted will retire a stake pool","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:cert:genesisKeyDelegation":{"title":"register a new genesis key delegation","description":"sign a transaction that once submitted will register a new genesis key delegation, for advanced chain updates operations by the network governance","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:cert:moveInstantaneousRewardsCert":{"title":"spend governance treasury","description":"sign a transaction that once submitted will allow network governance to spend treasury funds, for example for Catalyst or the ITN","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:update":{"title":"update protocol parameters","description":"sign a transaction that once submitted will update chain protocol parameters","type":"object","properties":{"severity":{"type":"string","const":"high"}}},"signTx:requiredSigners":{"title":"require specific signatures","description":"sign a transaction that once submitted will get validated if also a specific cryptographic key has sign it","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:nativeScript":{"title":"execute simple contract","description":"sign a transaction that once submitted will execute a native script (for actions like mint,burn,locking assets,etc...)","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:plutusScript":{"title":"execute smart contract","description":"sign a transaction that once submitted will execute a plutus script (for actions like mint,burn,locking assets, swap tokens,etc...)","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:plutusData":{"title":"store smart contract data","description":"sign a transaction that once submitted will use and store smart contract data on-chain forever","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:redeemer:spend":{"title":"redeem assets from smart contract","description":"sign a transaction that once submitted may redeem some locked assets in a smart contract address","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:redeemer:mint":{"title":"mint or burn with smart contract","description":"sign a transaction that once submitted may mint or burn some native tokens with a smart contract","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:redeemer:cert":{"title":"sign certificate with smart contract","description":"sign a transaction that once submitted may sign a certificate with a smart contract for actions like stake delegation, pool registrations and more","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:redeemer:data":{"title":"store data to run a smart contract","description":"sign a transaction that once submitted stores data on-chain forever to trigger or redeem a smart contract action","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:auxiliaryData:metadata":{"title":"store metadata","description":"sign a transaction that once submitted will store arbitrary data on-chain forever (for minting NFTs,sending messages,or other transaction information)","type":"object","properties":{"severity":{"type":"string","const":"medium"}}},"signTx:auxiliaryData:nativeScript":{"title":"store simple contracts","description":"sign a transaction that once submitted will store native scripts on-chain forever","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"signTx:auxiliaryData:plutusScript":{"title":"store simple contracts","description":"sign a transaction that once submitted will store plutus scripts on-chain forever","type":"object","properties":{"severity":{"type":"string","const":"low"}}},"loadConfig":{"title":"load wallet configuration","description":"loads wallet configuration, and populates it generating child keys, child addresses, and other kind of artifacts","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"saveConfig":{"title":"save wallet configuration","description":"saves wallet configuration on-chain, forever, using a GCFS DiskNFT. Later you can load it calling `loadConfig`","type":"object","properties":{"severity":{"type":"string","const":"high"},"confirmOnRuntime":{"type":"boolean","const":true}}},"searchFs":{"title":"search onchain files ","description":"search for data and executable files stored on chain","type":"object","properties":{"severity":{"type":"string","const":"medium"}}}}},"common.json":{"$id":"common.json","type":"object","title":"Common definitions and types","description":"Common API definitions and types used by functions","definitions":{"Index":{"title":"Index Number","description":"Index Number, representing a position of an item on a list. (Positive Integer, greater or equal than zero)","type":"number"},"BigNumber":{"title":"Big Number","description":"Big Number (BigNum)","type":"string"},"SlotNumber":{"title":"Slot Number","description":"Slot Number (BigNum)","type":"string"},"Quantity":{"title":"Quantity","description":"Quantity (Positive BigNum)","type":"string"},"MintQuantity":{"title":"Mint Quantity","description":"Mint Quantity. Positive value will mint the asset and negative value will burn it (Positive or Negative, non-zero BigInt)","type":"string"},"Bytes":{"title":"Bytes (hex)","description":"Bytes in hexadecimal encoding","type":"string"},"TransactionHash":{"title":"Transaction Hash","description":"Transaction Hash (hexadecimal)","type":"string"},"BIP32PublicKeyHex":{"title":"BIP32 Public Key","description":"BIP32 Public Key (hexadecimal)","type":"string"},"Address":{"title":"Wallet Address","description":"Wallet Address (Bech32)","type":"string"},"RewardAddress":{"title":"Wallet Reward Address","description":"Wallet Reward Address (Bech32)","type":"string"},"PublicKey":{"title":"Public Key","description":"Public Key (hexadecimal)","type":"string"},"PublicKeyHash":{"title":"Public Key Hash","description":"Public Key Hash (hexadecimal)","type":"string"},"ScriptHash":{"title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)","type":"string"},"PoolKeyHash":{"title":"Stake Pool Key Hash","description":"Stake Pool Key Hash (hexadecimal)","type":"string"},"KeyDerivation":{"title":"Key Derivation","description":"Parameters required to derive a child key pair from wallet root private key","type":"object","oneOf":[{"title":"Key Derivation (BIP32 Path)","type":"object","properties":{"name":{"type":"string","title":"Name of this key pair reference in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide."},"path":{"description":"A valid BIP32-Ed25519 (Shelley) or BIP44-Ed25519 (Byron) Cardano derivation path serialized as string mask with hardening markers (`h` or `'`)","examples":["m/1852h/1815h/0h/0/0","m/1852'/1815'/0'/2/0"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false,"description":"Use a valid BIP32-Ed25519 (Shelley) or BIP44-Ed25519 (Byron) Cardano derivation path to derive a child key pair from wallet root private key","required":["path","name"]},{"title":"Key Derivation (Simple path)","type":"object","properties":{"name":{"type":"string","title":"Name of this key pair reference in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide."},"kind":{"anyOf":[{"type":"string","enum":["spend","stake"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"accountIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"addressIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false,"description":"Use JSON parameters to derive a child key pair from wallet root private key","required":["kind","accountIndex","addressIndex","name"]}]},"ScriptRefHex":{"title":"Script Reference (Hex)","description":"Plutus or Native Script Reference object in hexadecimal encoding","type":"string"},"PlutusScriptHex":{"title":"Plutus Script (Hex)","description":"Plutus Script in hexadecimal encoding","type":"string"},"PlutusDataHex":{"title":"Plutus Datum (Hex)","description":"Plutus Datum in hexadecimal encoding","type":"string"},"PlutusDataHashHex":{"title":"Plutus Datum Hash (Hex)","description":"Plutus Datum Hash of a Plutus Datum in hexadecimal encoding","type":"string"},"PlutusDataFromHex":{"title":"Plutus Datum from hexadecimal encoding","description":"Plutus Datum previously encoded in hexadecimal","type":"object","properties":{"fromHex":{"$ref":"common.json#/definitions/PlutusDataHex"}},"required":["fromHex"]},"PlutusDataFromJSON":{"title":"Plutus Datum from JSON","description":"Plutus Datum as JSON format","type":"object","properties":{"fromJSON":{"oneOf":[{"title":"JSON definition (from string)","description":"JSON (string)","type":"object","properties":{"schema":{"anyOf":[{"type":"number"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"json":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"JSON definition (from object)","description":"JSON (object)","type":"object","properties":{"schema":{"anyOf":[{"type":"number"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"obj":{"anyOf":[{"type":["number","string","boolean","object","array","null"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["fromJSON"]},"PlutusDataBytes":{"title":"Plutus Datum of Bytes (hex)","description":"Plutus Datum of bytes in hexadecimal encoding","type":"object","properties":{"bytesHex":{"$ref":"common.json#/definitions/Bytes"}},"required":["bytesHex"]},"PlutusRedeemerDataHex":{"title":"Plutus Redeemer Data (Hex)","description":"Plutus Redeemer Data in hexadecimal encoding","type":"string"},"PlutusRedeemerType":{"title":"Plutus Redeemer Type","description":"Plutus Redeemer Type","type":"string","enum":["spend","mint","cert","reward"]},"PlutusRedeemer":{"title":"Plutus Redeemer","description":"Plutus Redeemer definition","type":"object","properties":{"itemIdPattern":{"title":"Redeemable Item ID","default":"{itemType}:{key}","examples":["item_{itemType}_{key}","#{index}"],"description":"The matching user defined item ID that will be consumed by this redeemer. The same ID has to match the transaction item ID that this redeemer will try to consume. Pattern can contain this placeholder variables:`key`, `index` (list index, not in-transaction redeemable item index), `itemType` ('spend','mint','cert' or 'reward')","anyOf":[{"title":"Redeemable ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"type":{"anyOf":[{"$ref":"common.json#/definitions/PlutusRedeemerType"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusRedeemerDataHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"memExUnits":{"anyOf":[{"$ref":"common.json#/definitions/BigNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stepsExUnits":{"anyOf":[{"$ref":"common.json#/definitions/BigNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["itemIdPattern","type"],"additionalProperties":false},"PlutusDatumSource":{"title":"Plutus Datum Source","description":"Plutus Datum Source definition","type":"object","properties":{"input":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusDataHashHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusDataBytes"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"PlutusScriptSource":{"title":"Plutus Script Source","description":"Plutus Script Source definition","type":"object","properties":{"input":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"lang":{"anyOf":[{"type":"string","enum":["plutus_v1","plutus_v2"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"PlutusConsumer":{"title":"Plutus Consumer","description":"Plutus Consumer definition. This parameters are additional information supplied that the node will use to validate the execution of the Plutus Validator (smart contract). There are no strict mandatory properties as some data can be inferred by GC automatically now or in the future, or you may want to freely combine it, but `scriptHashHex` is required if you provide a `redeemer` ","type":"object","properties":{"datum":{"anyOf":[{"$ref":"common.json#/definitions/PlutusDatumSource"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"redeemer":{"anyOf":[{"$ref":"common.json#/definitions/PlutusRedeemer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"PlutusBundle":{"title":"Plutus Bundle","description":"Plutus Bundle with properties required to interact with Smart Contracts. ","type":"object","properties":{"scripts":{"title":"Plutus Script Sources","description":"List or Key-Value Map of Plutus Script Sources. Inlined or referenced (deployed) Plutus Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PlutusScriptSource"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PlutusScriptSource"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PlutusScriptSource"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"consumers":{"title":"Plutus Consumers","description":"List or Key-Value Map of Plutus Consumers. Redeemers and Inlined or referenced Datums","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PlutusConsumer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PlutusConsumer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PlutusConsumer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"ScriptPlutusCode":{"title":"Plutus Code","description":"Plutus Code to be compiled","type":"object","properties":{"plutusCode":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"ScriptMarloweCode":{"title":"Marlowe Code","description":"Marlowe Code to be compiled","type":"object","properties":{"marloweCode":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"ScriptHeliosCode":{"title":"Helios Code","description":"Helios Code to be compiled. Can be used not only to generate Plutus Validators and Parameterized Plutus Validators (Cardano Smart Contracts) but also Helios-compatible Plutus Data structures using parameter exports.","type":"object","properties":{"heliosCode":{"description":"Helios code as string that will be compiled. To avoid GCScript XSS filters to modify some Helios language operators, pass the code on other encoding, such as hexadecimal string. Dynamic code compilation allows you to generate parameterized plutus validator code on user wallet side.","examples":["{hexToStr('0a7370656e64696e672074696d655f6c6f636b0a0a73747275637420446174756d207b0a202020206c6f636b556e74696c3a20202054696d650a202020206f776e65723a202020202020205075624b657948617368202f2f20746865206f776e65722063616e20616c7761797320756e6c6f636b20746865206173736574730a2020202062656e65666963696172793a205075624b657948617368202f2f2062656e65666963696172792063616e206f6e6c7920756e6c6f636b207468652061737365747320616674657220276c6f636b556e74696c270a7d0a0a66756e63206d61696e28646174756d3a20446174756d2c205f2c206374783a20536372697074436f6e7465787429202d3e20426f6f6c207b0a2020202074783a205478203d206374782e74783b0a202020206e6f773a2054696d65203d2074782e74696d655f72616e67652e73746172743b0a0a2020202074782e69735f7369676e65645f627928646174756d2e6f776e657229207c7c20280a202020202020202074782e69735f7369676e65645f627928646174756d2e62656e6566696369617279292026260a20202020202020206e6f77203e20646174756d2e6c6f636b556e74696c0a20202020290a7d0a20202020202020200a636f6e7374204558414d504c455f444154554d203a446174756d203d20446174756d7b0a2020202054696d653a3a6e6577284578616d706c6554696d65292c0a202020205075624b6579486173683a3a6e657728233031323334353637383961626364663031323334353637383961626364663031323334353637383961626364663031323334353637383961292c0a202020205075624b6579486173683a3a6e657728236664636261393837363534333231306664636261393837363534333231306664636261393837363534333231306664636261393837363534290a7d0a0a')}","{replaceAll(hexToStr('0a7370656e64696e672074696d655f6c6f636b0a0a73747275637420446174756d207b0a202020206c6f636b556e74696c3a20202054696d650a202020206f776e65723a202020202020205075624b657948617368202f2f20746865206f776e65722063616e20616c7761797320756e6c6f636b20746865206173736574730a2020202062656e65666963696172793a205075624b657948617368202f2f2062656e65666963696172792063616e206f6e6c7920756e6c6f636b207468652061737365747320616674657220276c6f636b556e74696c270a7d0a0a66756e63206d61696e28646174756d3a20446174756d2c205f2c206374783a20536372697074436f6e7465787429202d3e20426f6f6c207b0a2020202074783a205478203d206374782e74783b0a202020206e6f773a2054696d65203d2074782e74696d655f72616e67652e73746172743b0a0a2020202074782e69735f7369676e65645f627928646174756d2e6f776e657229207c7c20280a202020202020202074782e69735f7369676e65645f627928646174756d2e62656e6566696369617279292026260a20202020202020206e6f77203e20646174756d2e6c6f636b556e74696c0a20202020290a7d0a20202020202020200a636f6e7374204558414d504c455f444154554d203a446174756d203d20446174756d7b0a2020202054696d653a3a6e6577284578616d706c6554696d65292c0a202020205075624b6579486173683a3a6e657728233031323334353637383961626364663031323334353637383961626364663031323334353637383961626364663031323334353637383961292c0a202020205075624b6579486173683a3a6e657728236664636261393837363534333231306664636261393837363534333231306664636261393837363534333231306664636261393837363534290a7d0a0a'),'ExampleTime','1234')}"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"simplify":{"description":"Simplifies produced CBOR hexadecimal output and removes debugging traces. This will produce script changes, and can lead to script hash, address, policy id and other unwanted changes.","default":true,"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"version":{"description":"Helios compiler version. A change in version can produce script changes, and this can lead to script hash, address, policy id and other unwanted changes.","default":"latest","anyOf":[{"type":"string","enum":["latest","0.15.2"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"parameters":{"title":"Exported Parameters","description":"List or Key-Value Map of Exported Parameters. Must be in uppercase and compatible with Helios parameter naming conventions. Useful to build Plutus Data from Helios Code","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}],"examples":["EXPORTS","DATUM_EXAMPLE"]}},"required":["heliosCode"],"additionalProperties":false},"NativeScriptHex":{"title":"Native Script (Hex)","description":"Native Script in hexadecimal encoding","type":"string","additionalProperties":false},"ScriptPubKey":{"title":"Public Key Native Script","description":"Require transactions to be signed using specific key signature","properties":{"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"ScriptTimelockStart":{"title":"Timelock Start Native Script","description":"Require transactions to be submitted after an specific slot number (blockchain time measure unit that equals 1 second)","properties":{"slotNumStart":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"ScriptTimelockExpiry":{"title":"Timelock Expiry Native Script","description":"Require transactions to be submitted before an specific slot number (blockchain time measure unit that equals 1 second)","properties":{"slotNumEnd":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"ScriptAll":{"title":"All Native Script","description":"Require transactions to fullfil all the items from a list of native scripts","properties":{"all":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"ScriptAny":{"title":"Any Native Script","description":"Require transactions to fullfil any of the items from a list of native scripts","properties":{"any":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"ScriptAtLeastN":{"title":"At Least N Native Script","description":"Require transactions to fullfil a minimum number of items from a list of native scripts","properties":{"atLeast":{"type":"number"},"ofThese":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScript"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"NativeScript":{"oneOf":[{"title":"Native Script","description":"Native Script (Hexadecimal)","type":"object","additionalProperties":false,"properties":{"scriptHex":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}}},{"$ref":"common.json#/definitions/ScriptPubKey"},{"$ref":"common.json#/definitions/ScriptTimelockStart"},{"$ref":"common.json#/definitions/ScriptTimelockExpiry"},{"$ref":"common.json#/definitions/ScriptAll"},{"$ref":"common.json#/definitions/ScriptAny"},{"$ref":"common.json#/definitions/ScriptAtLeastN"}]},"PlutusScript":{"title":"Plutus Script","description":"Plutus on-chain validator code, also known as 'Cardano smart contracts'","type":"object","oneOf":[{"title":"Plutus Script","description":"Plutus Script (Hexadecimal)","type":"object","additionalProperties":false,"properties":{"scriptHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"lang":{"anyOf":[{"type":"string","enum":["plutus_v1","plutus_v2"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["scriptHex","lang"]},{"$ref":"common.json#/definitions/ScriptHeliosCode"},{"$ref":"common.json#/definitions/ScriptPlutusCode"},{"$ref":"common.json#/definitions/ScriptMarloweCode"}]},"PlutusData":{"title":"Plutus Datum","description":"Data format supported by plutus scripts. Used on-chain on transaction Datums and Redeemers","type":"object","oneOf":[{"$ref":"common.json#/definitions/PlutusDataFromHex"},{"$ref":"common.json#/definitions/PlutusDataFromJSON"},{"$ref":"common.json#/definitions/PlutusDataBytes"}]},"StakeRegistration":{"title":"Stake Registration Certificate","description":"Certificate to register on-chain a stake key or script","type":"object","oneOf":[{"title":"Stake Registration Certificate","description":"Use a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeRegistration"},"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Stake Registration Certificate","description":"Use a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeRegistration"},"scriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"StakeDeregistration":{"title":"Stake De-Registration Certificate","description":"Certificate to de-register on-chain a stake key or script","type":"object","oneOf":[{"title":"Stake De-Registration Certificate","description":"Use a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeDeregistration"},"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Stake De-Registration Certificate","description":"Use a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeDeregistration"},"scriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"StakeDelegation":{"title":"Stake Delegation Certificate","description":"Certificate to delegate to a stake pool the coins of all addresses that are using an specific registered stake key or script as staking credential","type":"object","oneOf":[{"title":"Stake Delegation Certificate","description":"Use a pool key hash, and a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeDelegation"},"poolKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PoolKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Stake Delegation Certificate","description":"Use a pool key hash, and a stake key or script to define the certificate","properties":{"kind":{"type":"string","const":"StakeDelegation"},"poolKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PoolKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"CertificateHex":{"title":"Certificate (Hex)","description":"Any supported certificate in hexadecimal encoding","type":"string"},"Certificate":{"title":"Certificate","description":"Generate a certificate to delegate stake or do other supported operations","type":"object","oneOf":[{"title":"Certificate (Hex)","anyOf":[{"$ref":"common.json#/definitions/CertificateHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},{"title":"Stake Registration","anyOf":[{"$ref":"common.json#/definitions/StakeRegistration"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},{"title":"Stake De-Registration","anyOf":[{"$ref":"common.json#/definitions/StakeDeregistration"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},{"title":"Stake Delegation","anyOf":[{"$ref":"common.json#/definitions/StakeDelegation"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}]},"TxAuxiliaryData":{"title":"Transaction Auxiliary Data","description":"Definition of a transaction auxiliary data or metadata","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{}},"additionalProperties":false},"Asset":{"title":"Asset","description":"Definition of a Cardano asset.","type":"object","oneOf":[{"title":"Asset","description":"Define a Cardano asset using an ASCII asset name encoding as argument","type":"object","properties":{"policyId":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"quantity":{"anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assetName":{"type":"string"}},"additionalProperties":false},{"title":"Asset","description":"Define a Cardano asset using an hexadecimal asset name encoding as argument","type":"object","properties":{"policyId":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"quantity":{"anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assetNameHex":{"type":"string"}},"additionalProperties":false}]},"MintAsset":{"title":"Mint Asset","description":"Definition of a Cardano mint asset action. Positive quantity will mint, negative quantity will burn native assets.","type":"object","oneOf":[{"title":"Mint Asset","description":"Define a Cardano mint asset using an ASCII asset name encoding as argument","type":"object","properties":{"policyId":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"quantity":{"anyOf":[{"$ref":"common.json#/definitions/MintQuantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assetName":{"type":"string"}},"additionalProperties":false},{"title":"Mint Asset","description":"Define a Cardano mint asset using an hexadecimal asset name encoding as argument","type":"object","properties":{"policyId":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"quantity":{"anyOf":[{"$ref":"common.json#/definitions/MintQuantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assetNameHex":{"type":"string"}},"additionalProperties":false}]},"TxMint":{"title":"Transaction Mint","description":"Definition of a transaction mint action, where native assets can be minted or burned","type":"object","properties":{"idPattern":{"title":"Item ID","examples":["item_{itemType}_{key}","#{index}"],"description":"User defined item ID. Will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"policyId":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assets":{"title":"Transaction outputs","description":"List or Key-Value Map of TxMint","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"TxCertificate":{"title":"Transaction Certificate","description":"Definition of a transaction certificate","type":"object","properties":{"idPattern":{"title":"Item ID","examples":["item_{itemType}_{key}","#{index}"],"description":"User defined item ID. Will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"certHex":{"anyOf":[{"$ref":"common.json#/definitions/CertificateHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"TxInput":{"title":"Transaction Input","description":"Definition of a transaction input","type":"object","properties":{"txHash":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"index":{"anyOf":[{"$ref":"common.json#/definitions/Index"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"TxInputRedeemable":{"title":"Transaction Input","description":"Definition of a transaction input","type":"object","properties":{"txHash":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"index":{"anyOf":[{"$ref":"common.json#/definitions/Index"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"idPattern":{"title":"Item ID","examples":["item_{itemType}_{key}","#{index}"],"description":"User defined item ID. Will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"TxOutput":{"title":"Transaction Output","description":"Definition of a transaction output","type":"object","properties":{"idPattern":{"title":"Item ID","examples":["item_{itemType}_{key}","#{index}"],"description":"User defined item ID. Will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"address":{"anyOf":[{"$ref":"common.json#/definitions/Address"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assets":{"title":"Transaction outputs","description":"List or Key-Value Map of TxOutput","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"datum":{"oneOf":[{"title":"Datum Hash","description":"Datum Hash","type":"object","properties":{"datumHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusDataHashHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Inlined Datum (hex)","description":"Inlined Datum (hex)","type":"object","properties":{"datumHex":{"anyOf":[{"$ref":"common.json#/definitions/PlutusDataHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"script":{"title":"Inlined Script","description":"Inlined Script","type":"object","properties":{"scriptRefHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptRefHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}},"additionalProperties":false},"TxWithdrawal":{"title":"Transaction Reward Withdrawal","description":"Definition of a transaction reward withdrawal","type":"object","properties":{"idPattern":{"title":"Item ID","examples":["item_{itemType}_{key}","#{index}"],"description":"User defined item ID. Will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"address":{"anyOf":[{"$ref":"common.json#/definitions/RewardAddress"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"quantity":{"anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"Tx":{"title":"Transaction","description":"A Cardano transaction definition, with fields like inputs,outputs,mints,certificates,smart contracts and metadata","type":"object","properties":{"ttl":{"title":"Time to live","description":"Transaction validity interval in slots (1 second)","type":"object","properties":{"from":{"title":"Valid From  (slots)","description":"If set, is the absolute time in slots (1 second) since when the transaction will be valid.","anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"duration":{"title":"Time to live (slots)","description":"If set, is the duration in slots (1 second) from `from` since when the transaction will be valid. Cannot be used if `until` is used","anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"until":{"title":"Valid Until (slots)","description":"If set, is the absolute time in slots (1 second) after which the transaction will be no longer valid. Cannot be used if `duration` is used","anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}}},"inputs":{"title":"Transaction Inputs","description":"List or Key-Value Map of TxInputRedeemable","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxInputRedeemable"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInputRedeemable"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInputRedeemable"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"referenceInputs":{"title":"Transaction Reference Inputs","description":"List or Key-Value Map of TxInput","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"collateral":{"title":"Transaction Collateral Inputs","description":"List or Key-Value Map of Transaction Collateral Inputs","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxInput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"outputs":{"title":"Transaction outputs","description":"List or Key-Value Map of TxOutput","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxOutput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxOutput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxOutput"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"withdrawals":{"title":"Transaction withdrawals","description":"List or Key-Value Map of TxWithdrawal","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxWithdrawal"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxWithdrawal"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxWithdrawal"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"mints":{"title":"Transaction mints","description":"List or Key-Value Map of TxMint","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxMint"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxMint"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxMint"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"requiredSigners":{"title":"Transaction Required Signers","description":"List or Key-Value Map of Transaction Required Signer. Among other reasons, when a transaction contains some features like Native or Plutus Scripts, is possible that it gets validated with many different verification key witnesses (signatures) combinations. To enforce a witness set or combination, you can include the verification key hashes in this list. Will use a feature in transaction's CBOR structure known as `required_signers`  ","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"optionalSigners":{"title":"Transaction Optional Signers","description":"List or Key-Value Map of Transaction Optional Signer. When a transaction contains some features like Native or Plutus Scripts, is possible that it gets validated with many different verification key witnesses (signatures) combinations. This won't alter the body, neither the transaction hash, but it affects de fee calculation. Without knowing the highest amount possible of witnesses, fee will be lower than required and transaction validation will fail. This `optionalSigners` list is meant to contain the worst amount of verification key hashes possible. It will fill transaction's witness set CBOR structure with dummy witnesses to emulate the worst amount of bytes that can be used","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"certificates":{"title":"Transaction Certificates","description":"List or Key-Value Map of TxCertificate","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TxCertificate"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxCertificate"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TxCertificate"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"witnesses":{"type":"object","properties":{"nativeScripts":{"title":"Transaction Native Script Witnesses","description":"List or Key-Value Map of Native Script Witnesses","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"plutus":{"title":"Transaction Plutus Smart Contract Witnesses","description":"Plutus Smart Contract Witnesses, consisting on Script Sources and Consumers","anyOf":[{"$ref":"common.json#/definitions/PlutusBundle"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"auxiliaryData":{"anyOf":[{"$ref":"common.json#/definitions/TxAuxiliaryData"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"options":{"type":"object","properties":{"validFromNow":{"title":"Set Valid From Now","description":"When `true`, it overrides `ttl.from` automatically with the current slot number from the node","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"coinSelection":{"type":"string","oneOf":[{"type":"string","const":"NO","title":"None","description":"No automatic coin selection. User must provide inputs manually"},{"type":"string","const":"FMR","title":"Farmer","description":"Deterministic. Chooses first the UTXOs with more ada and less native assets. It tries to avoid using UTXOs with assets as long as possible"},{"type":"string","const":"NCR","title":"Nutcracker","description":"Deterministic. Chooses first the UTXOs with more ada and MORE native assets. Tries to split asset bundles to keep the wallet with low asset concentration in the same utxo"},{"type":"string","const":"RND","title":"Random","description":"Non deterministic. Ideal for scenarios where (when possible because current UTXO distribution) concurrency is needed. This is what is used in the testnet airdrop as well"}]},"changeOptimizer":{"type":"string","oneOf":[{"type":"string","const":"NO","title":"None","description":"GC will not modify change outputs to improve UTXO setup"},{"type":"string","const":"BAL","title":"Balanced","description":"tries to keep 50% pure ADA UTXOs and 50% of 'muggles'. 50 UTXOs max in total. Each change output produced will have an ada value that will grow exponentially from the previous one"},{"type":"string","const":"SVC-XS","title":"Service Wallet [1K UTXOS x 3ADA]","description":"creates 1000 UTXOs max, trying to keep 3 ada on each. Ideal for dapps so they can have more available unlocked UTXOs, which is useful for making concurrent transactions."},{"type":"string","const":"POP","title":"Populator [not recommended]","description":"similar to the Service Wallet but parametrized by GC. It's what we are currently using for the testnet airdrop feature.It's not recommended because we may change parameters in the future."}]},"collateralCoinSelection":{"type":"string","oneOf":[{"type":"string","const":"NO","title":"None","description":"No automatic collateral coin selection. User must provide inputs manually"},{"type":"string","const":"LASLAD","title":"Less Assets Less Ada","description":"Deterministic. Chooses first the UTXOs with less native assets and less ada. It tries to avoid using UTXOs with assets and with big amounts of ada as long as possible for low risk collateral selection"}]},"setCollateralCoin":{"anyOf":[{"$ref":"common.json#/definitions/Quantity"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"addOptionalSigners":{"description":"Add `addOptionalSigners` number of dummy witnesses as placeholders to account for bytes and therefore fees for extra amount of possible signers. Sometimes the list of possible valid signers of a transaction can be variable, like with native or plutus scripts. You can set this number to the biggest amount of signers needed to successfully validate a transaction. You can also enumerate some `optionalSigners` manually, this option instead creates random key hashes and witnesses automatically","anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"autoOptionalSigners":{"anyOf":[{"type":"object","description":"Automatically detect the list of signers keys required for each feature and add dummy witnesses for all of them (placeholders to account for bytes and therefore fees). In some cases such as `nativeScript` the detected signers can be all the possible signers used inside the script, without taking any actual script execution into account","properties":{"nativeScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"autoRequireSigners":{"anyOf":[{"type":"object","description":"Automatically detect the list of signers keys required for each feature and add them to the `required_signers` field of the transaction to explicitly make them mandatory. In some cases such as `nativeScript` the detected signers can be all the possible signers used inside the script, without taking  any actual script execution into account","properties":{"input":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"collateral":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"nativeScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"certs":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"rewards":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"required":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"autoProvision":{"anyOf":[{"type":"object","description":"When some elements on a transaction are missing, but can be found elsewhere, for example on a user's Workspace, this plugins can insert them automatically when set to `true`.","properties":{"workspaceNativeScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"workspacePlutusScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultIdPattern":{"title":"Default Item ID Pattern","default":"{itemType}:{key}","examples":["item_{itemType}_{key}","#{index}"],"description":"When not individually set, each user defined transaction item will be assigned with an ID generated based on this pattern. IDs will be used on `buildTxs` API to return an `indexMap` with final in-transaction indexes. On redeemable items it has to match the redeemer ID that will consume the item. Pattern can contain this placeholder variables:`key`, `index` (list index, not final in-transaction index), `itemType` (like 'output','spend','mint','cert','reward', etc..)","anyOf":[{"title":"Default Item ID Pattern","type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}},"additionalProperties":false},"FileSystemPathMap":{"title":"File System Paths","description":"Definition of a File System Path Map, a mapping of node absolute paths and their corresponding node type definitions","type":"object","minProperties":1,"patternProperties":{"":{"oneOf":[{"title":"File Node","description":"File Data Node (hex)","type":"object","properties":{"kind":{"type":"string","const":"file"},"fileHex":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["kind","fileHex"]},{"title":"Directory Node","description":"Directory Node","type":"object","properties":{"kind":{"type":"string","const":"directory"}},"required":["kind"]},{"title":"External File Link","description":"Link to external file data. Data wont be stored again, it's just a reference to data from a prior version of this filesystem (no `fromAddresses` specified ) or from any other filesystem. Use it with caution, ensure you trust these external data sources. Data has to exist prior to the creation of this new filesystem version, newer data will not be referenced.","type":"object","properties":{"kind":{"type":"string","const":"extLink"},"fileHash":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"fromAddresses":{"title":"Data Source Addresses","description":"List or Key-Value Map of Addresses. Fragments of data could be issued by any of this addresses","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/Address"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Address"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/Address"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["kind","fileHash"]}]}}},"FileSystemSearchParams":{"title":"File System Search Parameters","description":"Definition of File System Search Parameters","type":"object","oneOf":[{"title":"Fingerprint","description":"Fingerprint","type":"object","properties":{"fingerprint":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false},{"title":"Policy ID","description":"Policy ID","type":"object","properties":{"policyId":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false},{"title":"Asset Name","description":"Asset Name","type":"object","properties":{"assetName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false},{"title":"File Name","description":"File Name (exact match)","type":"object","properties":{"fileName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false},{"title":"Keyword","description":"Keyword (individual file name parts and extensions)","type":"object","properties":{"keyWord":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false},{"title":"File Hash","description":"SHA512 File Hash (to search by file content)","type":"object","properties":{"fileHash":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false}]},"NativeScriptCBORHex":{"title":"Native Script (CBOR Hex)","description":"Require transactions to be signed using a Native Script, which is provided in `scriptHex` with hexadecimal encoding","type":"object","properties":{"scriptHex":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptName":{"title":"Native Script Name","description":"Require transactions to be signed using a Native Script referenced by it's artifact name within same workspace. Name is usually generated using the `namePattern` property","type":"object","properties":{"scriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptPubKeyHash":{"title":"Public Key Hash Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's hash `pubKeyHashHex`","type":"object","properties":{"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptPubKeyName":{"title":"Public Key Name Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's artifact name `pubKeyName` within the same workspace. Name is usually generated using the `namePattern` property ","type":"object","properties":{"pubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptTimelockStart":{"title":"Timelock Start Native Script","description":"Require transactions to be submitted after an specific slot number `slotNumStart` (blockchain time measure unit that equals 1 second)","type":"object","properties":{"slotNumStart":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptTimelockExpiry":{"title":"Timelock Expiry Native Script","description":"Require transactions to be submitted before an specific slot number `slotNumEnd` (blockchain time measure unit that equals 1 second)","type":"object","properties":{"slotNumEnd":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NativeScriptAll":{"title":"All Native Script","description":"Require transactions to fullfil `all` these items from a list of native scripts","type":"object","properties":{"all":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"NativeScriptAny":{"title":"Any Native Script","description":"Require transactions to fullfil `any` of the items from a list of native scripts","type":"object","properties":{"any":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"NativeScriptAtLeastN":{"title":"At Least N Native Script","description":"Require transactions to fullfil `atLeast` a minimum number of items from a list of native scripts (`ofThese`)","type":"object","properties":{"atLeast":{"type":"number"},"ofThese":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"additionalProperties":false},"NativeScriptVariants":{"oneOf":[{"$ref":"common.json#/definitions/NativeScriptCBORHex"},{"$ref":"common.json#/definitions/NativeScriptName"},{"$ref":"common.json#/definitions/NativeScriptPubKeyHash"},{"$ref":"common.json#/definitions/NativeScriptPubKeyName"},{"$ref":"common.json#/definitions/NativeScriptTimelockStart"},{"$ref":"common.json#/definitions/NativeScriptTimelockExpiry"},{"$ref":"common.json#/definitions/NativeScriptAll"},{"$ref":"common.json#/definitions/NativeScriptAny"},{"$ref":"common.json#/definitions/NativeScriptAtLeastN"}]},"KeyDerivationParams":{"title":"Key Derivation Parameters","description":"Parameters required to derive a child key pair from wallet root private key","type":"object","oneOf":[{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse.This is the name property of this record. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`, `kind`, `accountIndex`, `addressIndex`"},"pathPattern":{"description":"A valid BIP32-Ed25519 (Shelley) or BIP44-Ed25519 (Byron) Cardano derivation path serialized as string mask with hardening markers (`h` or `'`). Pattern can contain this placeholder variables:`key`, `index`","examples":["m/1852h/1815h/0h/0/0","m/1852'/1815'/0'/2/0","m/1852h/1815h/0h/0/{index}","m/1852'/1815'/{key}'/2/0"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Key Derivation (BIP32 Path)","description":"Derive a child key pair using a derivation path","required":["pathPattern"],"additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse.This is the name property of this record. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`, `kind`, `accountIndex`, `addressIndex`"},"kind":{"anyOf":[{"type":"string","enum":["spend","stake"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"accountIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"addressIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Key Derivation (Simple path)","description":"Derive a child key pair using simple JSON properties to generate a BIP32-Ed25519 (Shelley) derivation path","required":["kind","accountIndex","addressIndex"],"additionalProperties":false}]},"AddressBuilderParams":{"title":"Address Builder Parameters","description":"Parameters required to build Cardano Addresses","type":"object","minProperties":1,"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendPubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendNativeScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakeNativeScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendPlutusScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePlutusScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"icarusPubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendPubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakeScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"icarusPubKeyHex":{"anyOf":[{"$ref":"common.json#/definitions/BIP32PublicKeyHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"NamedArtifactParams":{"title":"Named Artifact Parameters","description":"Parameters required to create an Named Artifact. Addresses, Keys and other artifacts, with an associated Named Artifact are shown on user interface and can be referenced by name on scripts. Unnamed artifacts became orphans, present on wallet artifact store but unreachable.","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"refPattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"WorkspaceCreationParams":{"title":"Workspace Creation Parameters","description":"Parameters required to create a Workspace, a named group of addresses, keys and other artifacts. Users can switch between artifacts for instance to use more receiving addresses, multi-delegate stake, participate in DAOs, sign messages with special keys, and more... ","type":"object","properties":{"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"titlePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"descriptionPattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},"WalletSetupLayer":{"title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer","type":"object","oneOf":[{"title":"Key Name","description":"Create Named Key Artifact: Addresses, Keys and other artifacts, with an associated Named Artifact are shown on user interface and can be referenced by name on scripts. Unnamed artifacts became orphans, present on wallet artifact store but unreachable. ","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this workspace and other artifacts will reference to this name property to be included in this workspace. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`"},"refPattern":{"description":"Key reference of the Key artifact you are naming. Uses same variables as `namePattern`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"type":{"type":"string","const":"KeyName"},"items":{"title":"Named Artifact Parameters","description":"List or Key-Value Map of Named Artifact Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"Address Name","description":"Create Named Address Artifact: Addresses, Keys and other artifacts, with an associated Named Artifact are shown on user interface and can be referenced by name on scripts. Unnamed artifacts became orphans, present on wallet artifact store but unreachable. ","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this workspace and other artifacts will reference to this name property to be included in this workspace. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`"},"refPattern":{"description":"Key reference of the Address artifact you are naming. Uses same variables as `namePattern`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"type":{"type":"string","const":"AddressName"},"items":{"title":"Named Artifact Parameters","description":"List or Key-Value Map of Named Artifact Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"NativeScript Name","description":"Create Named NativeScript Artifact: Addresses, Keys and other artifacts, with an associated Named Artifact are shown on user interface and can be referenced by name on scripts. Unnamed artifacts became orphans, present on wallet artifact store but unreachable. ","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this workspace and other artifacts will reference to this name property to be included in this workspace. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`"},"refPattern":{"description":"Key reference of the NativeScript artifact you are naming. Uses same variables as `namePattern`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"type":{"type":"string","const":"NativeScriptName"},"items":{"title":"Named Artifact Parameters","description":"List or Key-Value Map of Named Artifact Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NamedArtifactParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"Workspace","description":"Create workspace: a named group of addresses, keys and other artifacts. Users can switch between artifacts for instance to use more receiving addresses, multi-delegate stake, participate in DAOs, sign messages with special keys, and more... ","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this workspace and other artifacts will reference to this name property to be included in this workspace. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`"},"titlePattern":{"description":"Title to show to users. Uses same variables as `namePattern`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"descriptionPattern":{"description":"Description to show to users. Uses same variables as `namePattern`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"type":{"type":"string","const":"Workspace"},"items":{"title":"Workspace Creation Parameters","description":"List or Key-Value Map of Workspace Creation Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/WorkspaceCreationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WorkspaceCreationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WorkspaceCreationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"Key","description":"Key Pair Derivation","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["key_{kind}_{key}","Key Number {index}"],"description":"Wallet stores locally specific objects for later reuse.This is the name property of this record. Names cannot collide. Pattern can contain this placeholder variables:`key`, `index`, `kind`, `accountIndex`, `addressIndex`"},"type":{"type":"string","const":"Key"},"kind":{"anyOf":[{"type":"string","enum":["spend","stake"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"items":{"title":"Key Derivation Parameters","description":"List or Key-Value Map of Key Derivation Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivationParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"Address","description":"Build Address","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["addr_{key}","Address of key hash {spendPubKeyHashHex}"],"description":"Wallet stores locally specific objects for later reuse.This is the name property of this record. Names cannot collide. Pattern can contain this placeholder variables:`spendPubKeyName`, `stakePubKeyName`, `spendNativeScriptName`, `stakeNativeScriptName`, `spendPlutusScriptName`, `stakePlutusScriptName`, `icarusPubKeyName`, `spendPubKeyHashHex`, `stakePubKeyHashHex`, `spendScriptHashHex`, `stakeScriptHashHex`, `icarusPubKeyHex`, `key`, `index`"},"type":{"type":"string","const":"Address"},"items":{"title":"Address Builder Parameters","description":"List or Key-Value Map of Address Builder Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/AddressBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/AddressBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/AddressBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false},{"title":"Native Script","description":"Build Native Script","type":"object","properties":{"workspaceIds":{"title":"Default Workspace Id List","description":"List or Key-Value Map of Default Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"title":"Pattern of item name in wallet local storage.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["native_script_{key}"],"description":"Wallet stores locally specific objects for later reuse.This is the name property of this record. Names cannot collide. Pattern can contain this placeholder variables:`spendPubKeyName`, `stakePubKeyName`, `spendNativeScriptName`, `stakeNativeScriptName`, `spendPlutusScriptName`, `stakePlutusScriptName`, `icarusPubKeyName`, `spendPubKeyHashHex`, `stakePubKeyHashHex`, `spendScriptHashHex`, `stakeScriptHashHex`, `icarusPubKeyHex`, `key`, `index`"},"type":{"type":"string","const":"NativeScript"},"items":{"title":"Native Script Builder Parameters","description":"List or Key-Value Map of Native Script Builder Parameters","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptBuilderParams"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["type"],"additionalProperties":false}]},"COSE1DataSignature":{"title":"COSE1 Data Signature Structure (CIP-8)","description":"The signature of some arbitrary data signed using CIP-8 specification.","type":"object","properties":{"signature":{"anyOf":[{"$ref":"common.json#/definitions/Bytes"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"key":{"anyOf":[{"$ref":"common.json#/definitions/Bytes"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["signature","key"],"additionalProperties":false},"PasswordProvider":{"title":"Password Provider","description":"Password providers methods","type":"object","oneOf":[{"properties":{"description":{"description":"Text that will be shown to ask user the password, meant for stating the reason of the request. A warning will clarify this request was originated from outside the wallet","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"id":{"description":"Reserved for future use","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"kind":{"type":"string","const":"modal"},"weak":{"description":"If `true` will allow the input of weak passwords, otherwise a strength check will be enforced to prevent weak passwords","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"default":{"description":"The default value the password input field will have. This allows users for example to override auto-generated encryption passphrases. The ethical principle here is to always allow the user to take control of passwords and secrets, while a quick, default suggestion based on wallet-specific user data may be applied to improve user experience.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":2,"required":["kind","description"],"additionalProperties":false,"title":"Modal","description":"Password modal for manual user input"}]},"PreprocessorPasswordProvider":{"title":"Pre-Processor Password Provider","description":"Password provider methods only for pre-processor stage functions","type":"object","oneOf":[{"properties":{"kind":{"type":"string","const":"modal"},"weak":{"description":"If `true` will allow the input of weak passwords, otherwise a strength check will be enforced to prevent weak passwords","type":"boolean"},"description":{"description":"Reason why the password is being requested","type":"string"}},"minProperties":1,"required":["kind","description"],"additionalProperties":false,"title":"Modal","description":"Password modal for manual user input"},{"properties":{"kind":{"type":"string","const":"system"}},"minProperties":1,"required":["kind"],"additionalProperties":false,"title":"System Modal","description":"Special password modal for manual user input, to only decrypt wallet configuration scripts generated by the wallet or by the `saveConfig` function"}]},"MultiSigProvider":{"title":"Multi-Signature Provider","description":"Multi-Signature methods to obtain all or some missing verification key signatures for one or more transactions","type":"object","oneOf":[{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"SignaturePackage"},"mode":{"type":"string","const":"manual"}},"minProperties":1,"required":["kind","mode"],"additionalProperties":false,"title":"Manual","description":"Manually import an hexadecimal encoded Signature Package from one or more transactions. This package can be exported from the wallet once somebody partially or fully signs a transaction, or group of them. A Signature Package is the hexadecimal encoded CBOR of a witness set of one or more transactions combined, for example on Cardano Serialization Lib: `TransactionWitnessSet.to_hex()`"},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"SignaturePackage"},"packageHex":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"mode":{"type":"string","const":"import"}},"minProperties":1,"required":["kind","mode","packageHex"],"additionalProperties":false,"title":"Import","description":"Import providing on `packageHex` argument an hexadecimal encoded Signature Package from one or more transactions. This package can be exported from the wallet once somebody partially or fully signs a transaction, or group of them.  A Signature Package is the hexadecimal encoded CBOR of a witness set of one or more transactions combined, for example on Cardano Serialization Lib: `TransactionWitnessSet.to_hex()`"},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"MainAddress"}},"minProperties":1,"required":["kind"],"additionalProperties":false,"title":"Main Wallet Address","description":"Sign using available spend or stake keys from user's main wallet address ( accountIndex=0 addressIndex=0 )"},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"CurrentWorkspace"}},"minProperties":1,"required":["kind"],"additionalProperties":false,"title":"Current Wallet Workspace","description":"Sign using available spend or stake keys of current wallet in the workspace"},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"Roundtable"},"share":{"default":true,"description":"Share available signatures to Roundtable.","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"relays":{"title":"Roundtable GunDB Relay Peers","description":"List of Roundtable GunDB Relay Peers to connect through. This setting replace default peers by custom ones.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["kind"],"additionalProperties":false,"title":"Roundtable","description":"Receive missing and share available signatures with Roundtable by connecting through the same GunDB relay peers"},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"Unimatrix"},"id":{"default":"SHA512( SORT(txHashHexList).JOIN('-') )","description":"Only Unimatrix peers using this `id` will be able to decrypt and share signatures, transactions and other data. If missing, default value will be auto-calculated using this formula `SHA512( SORT(txHashHexList).JOIN('-') )`","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"share":{"default":true,"description":"Share available signatures through privacy preserving Unimatrix protocol","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"shareTxs":{"default":true,"description":"Share transactions to be signed through privacy preserving Unimatrix protocol","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"announceTxHashes":{"default":false,"description":"Announce transaction hashes to request their signatures through privacy preserving Unimatrix protocol","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"announceTxHashesSubPath":{"default":"signTxs","description":"Transaction hashes announcement sub path to use, path items can be separated by `/`. Other Unimatrix nodes will need to listen to this exact subpath to be able to sync into the same announcement channel. Default value is `signTxs`.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"relays":{"title":"Unimatrix GunDB Relay Peers","description":"List of Unimatrix GunDB Relay Peers to connect through. This setting replace default peers by custom ones.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"minProperties":1,"required":["kind"],"additionalProperties":false,"title":"Unimatrix","description":"Receive missing and share available signatures with Unimatrix, our encrypted privacy preserving decentralized sync protocol, by connecting to the same GunDB relay peers. To monitor, or build signing dapps and backends visit <a href=\"https://github.com/GameChangerFinance/unimatrix\" target=\"_blank\" rel=\"noopener noreferrer\"> Unimatrix Sync NPM Library </a> "},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"GCFS"},"mode":{"type":"string","const":"broadcast"}},"minProperties":1,"required":["kind","mode"],"additionalProperties":false,"title":"GCFS Multisig request","description":"Multisig: request signatures over GCFS Protocol by broadcasting on-chain unsigned/half signed transactions CBOR (hex) "},{"properties":{"txHashes":{"title":"Transaction Hashes","description":"Hashes of whitelisted transactions that will be attempted to get signed with this provider. List or Key-Value Map of Transaction Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"vkHashes":{"title":"Public Key Hashes","description":"Public key hashes of whitelisted key pairs that will be used to sign with this provider. List or Key-Value Map of Public Key Hashes","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"kind":{"type":"string","const":"GCFS"},"mode":{"type":"string","const":"reply"}},"minProperties":1,"required":["kind","mode"],"additionalProperties":false,"title":"GCFS Multisig reply","description":"Multisig: reply with one or more transaction signatures (Signature Packages) over GCFS Protocol. Instead of signing, will only write the signatures on-chain. Use it in combination with other wallet signature providers first"}]},"ScriptArguments":{"title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`","examples":[{"foo":{"bar":"Hello World!","baz":3}},"Hello World",5]},"ScriptReturnModes":{"title":"Script Return Modes","description":"Modes in which a script( a block of code), will return it results","type":"object","default":{"mode":"all"},"oneOf":[{"properties":{"mode":{"type":"string","const":"none"}},"minProperties":1,"additionalProperties":false,"title":"None","description":"Will return `undefined`, and because is not a valid JSON value it will be purged. Behaves like the result of a `function():void;` in typescript","required":["mode"]},{"properties":{"mode":{"type":"string","const":"all"}},"minProperties":1,"additionalProperties":false,"title":"All","description":"Will return all it children code block results. This is the default isomorphic behavior of the scripting language","required":["mode"]},{"properties":{"mode":{"type":"string","const":"first"}},"minProperties":1,"additionalProperties":false,"title":"First","description":"Will return the result of it's first child code block.","required":["mode"]},{"properties":{"mode":{"type":"string","const":"last"}},"minProperties":1,"additionalProperties":false,"title":"Last","description":"Will return the result of it's last child code block. This is widely used to return data back to dapps or calling agents as it allows you to group and format results at the end of the script execution","required":["mode"]},{"properties":{"mode":{"type":"string","const":"one"},"key":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false,"title":"One","description":"Will return the result of one child code block, the one in the `key` name or position argument.","required":["mode","key"]},{"properties":{"mode":{"type":"string","const":"some"},"keys":{"anyOf":[{"type":"array","items":{"type":"string"}},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"additionalProperties":false,"title":"Some","description":"Will return the result of some children code blocks, the ones in the `keys` name or position list argument.","required":["mode","keys"]},{"properties":{"mode":{"type":"string","const":"macro"},"exec":{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}},"minProperties":1,"additionalProperties":false,"title":"Inline Macro","description":"Will return the result of the execution of an inline scripting language macro. Useful for formatting, debugging results","required":["mode","exec"]}]},"ConditionProvider":{"title":"Conditions Provider","description":"Condition methods to be used in functions like `await`","type":"object","oneOf":[{"type":"object","properties":{"kind":{"anyOf":[{"type":"string","const":"timer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"unit":{"anyOf":[{"type":"string","default":"seconds","enum":["year","years","y","month","months","M","week","weeks","w","day","days","d","hour","hours","h","minute","minutes","m","second","seconds","s","millisecond","milliseconds","ms"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"value":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"required":["kind","value"],"additionalProperties":false,"title":"Timer","description":"Returns `true` on timeout "},{"type":"object","properties":{"kind":{"anyOf":[{"type":"string","const":"balance"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"address":{"anyOf":[{"$ref":"common.json#/definitions/Address"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"is":{"anyOf":[{"type":"string","default":"greater-or-equal","enum":["less","less-or-equal","equal","greater-or-equal","greater"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"asset":{"anyOf":[{"$ref":"common.json#/definitions/Asset"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"minProperties":1,"required":["kind","asset"],"additionalProperties":false,"title":"Balance","description":"Returns `true` once wallet asset balance meets a condition. If `address` is not specify, will use current address. If `ìs` is not specified, will default to `greater-or-equal`"}]},"NativeScriptBuilderParams":{"title":"Native Script Builder Parameters","description":"Parameters required to build Cardano Native Scripts","type":"object","oneOf":[{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptHex":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Native Script (CBOR Hex)","description":"Require transactions to be signed using a Native Script, which is provided in `scriptHex` with hexadecimal encoding","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"scriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Native Script Name","description":"Require transactions to be signed using a Native Script referenced by it's artifact name within same workspace. Name is usually generated using the `namePattern` property","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Public Key Hash Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's hash `pubKeyHashHex`","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Public Key Name Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's artifact name `pubKeyName` within the same workspace. Name is usually generated using the `namePattern` property ","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"slotNumStart":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Timelock Start Native Script","description":"Require transactions to be submitted after an specific slot number `slotNumStart` (blockchain time measure unit that equals 1 second)","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"slotNumEnd":{"anyOf":[{"$ref":"common.json#/definitions/SlotNumber"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"title":"Timelock Expiry Native Script","description":"Require transactions to be submitted before an specific slot number `slotNumEnd` (blockchain time measure unit that equals 1 second)","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"all":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"title":"All Native Script","description":"Require transactions to fullfil `all` these items from a list of native scripts","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"any":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"title":"Any Native Script","description":"Require transactions to fullfil `any` of the items from a list of native scripts","type":"object","additionalProperties":false},{"properties":{"workspaceIds":{"title":"Workspace Id List","description":"List or Key-Value Map of Workspace Id. Wallet UI will logically and visually group all items with the same workspace ids.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"atLeast":{"type":"number"},"ofThese":{"title":"Native Scripts","description":"List or Key-Value Map of Native Scripts","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptVariants"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"title":"At Least N Native Script","description":"Require transactions to fullfil `atLeast` a minimum number of items from a list of native scripts (`ofThese`)","type":"object","additionalProperties":false}]}},"properties":{"Index":{"$ref":"common.json#/definitions/Index","type":"number","title":"Index Number","description":"Index Number, representing a position of an item on a list. (Positive Integer, greater or equal than zero)"},"BigNumber":{"$ref":"common.json#/definitions/BigNumber","type":"string","title":"Big Number","description":"Big Number (BigNum)"},"SlotNumber":{"$ref":"common.json#/definitions/SlotNumber","type":"string","title":"Slot Number","description":"Slot Number (BigNum)"},"Quantity":{"$ref":"common.json#/definitions/Quantity","type":"string","title":"Quantity","description":"Quantity (Positive BigNum)"},"MintQuantity":{"$ref":"common.json#/definitions/MintQuantity","type":"string","title":"Mint Quantity","description":"Mint Quantity. Positive value will mint the asset and negative value will burn it (Positive or Negative, non-zero BigInt)"},"Bytes":{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},"TransactionHash":{"$ref":"common.json#/definitions/TransactionHash","type":"string","title":"Transaction Hash","description":"Transaction Hash (hexadecimal)"},"BIP32PublicKeyHex":{"$ref":"common.json#/definitions/BIP32PublicKeyHex","type":"string","title":"BIP32 Public Key","description":"BIP32 Public Key (hexadecimal)"},"Address":{"$ref":"common.json#/definitions/Address","type":"string","title":"Wallet Address","description":"Wallet Address (Bech32)"},"RewardAddress":{"$ref":"common.json#/definitions/RewardAddress","type":"string","title":"Wallet Reward Address","description":"Wallet Reward Address (Bech32)"},"PublicKey":{"$ref":"common.json#/definitions/PublicKey","type":"string","title":"Public Key","description":"Public Key (hexadecimal)"},"PublicKeyHash":{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},"ScriptHash":{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},"PoolKeyHash":{"$ref":"common.json#/definitions/PoolKeyHash","type":"string","title":"Stake Pool Key Hash","description":"Stake Pool Key Hash (hexadecimal)"},"KeyDerivation":{"$ref":"common.json#/definitions/KeyDerivation","type":"object","title":"Key Derivation","description":"Parameters required to derive a child key pair from wallet root private key"},"ScriptRefHex":{"$ref":"common.json#/definitions/ScriptRefHex","type":"string","title":"Script Reference (Hex)","description":"Plutus or Native Script Reference object in hexadecimal encoding"},"PlutusScriptHex":{"$ref":"common.json#/definitions/PlutusScriptHex","type":"string","title":"Plutus Script (Hex)","description":"Plutus Script in hexadecimal encoding"},"PlutusDataHex":{"$ref":"common.json#/definitions/PlutusDataHex","type":"string","title":"Plutus Datum (Hex)","description":"Plutus Datum in hexadecimal encoding"},"PlutusDataHashHex":{"$ref":"common.json#/definitions/PlutusDataHashHex","type":"string","title":"Plutus Datum Hash (Hex)","description":"Plutus Datum Hash of a Plutus Datum in hexadecimal encoding"},"PlutusDataFromHex":{"$ref":"common.json#/definitions/PlutusDataFromHex","type":"object","title":"Plutus Datum from hexadecimal encoding","description":"Plutus Datum previously encoded in hexadecimal"},"PlutusDataFromJSON":{"$ref":"common.json#/definitions/PlutusDataFromJSON","type":"object","title":"Plutus Datum from JSON","description":"Plutus Datum as JSON format"},"PlutusDataBytes":{"$ref":"common.json#/definitions/PlutusDataBytes","type":"object","title":"Plutus Datum of Bytes (hex)","description":"Plutus Datum of bytes in hexadecimal encoding"},"PlutusRedeemerDataHex":{"$ref":"common.json#/definitions/PlutusRedeemerDataHex","type":"string","title":"Plutus Redeemer Data (Hex)","description":"Plutus Redeemer Data in hexadecimal encoding"},"PlutusRedeemerType":{"$ref":"common.json#/definitions/PlutusRedeemerType","type":"string","title":"Plutus Redeemer Type","description":"Plutus Redeemer Type"},"PlutusRedeemer":{"$ref":"common.json#/definitions/PlutusRedeemer","type":"object","title":"Plutus Redeemer","description":"Plutus Redeemer definition"},"PlutusDatumSource":{"$ref":"common.json#/definitions/PlutusDatumSource","type":"object","title":"Plutus Datum Source","description":"Plutus Datum Source definition"},"PlutusScriptSource":{"$ref":"common.json#/definitions/PlutusScriptSource","type":"object","title":"Plutus Script Source","description":"Plutus Script Source definition"},"PlutusConsumer":{"$ref":"common.json#/definitions/PlutusConsumer","type":"object","title":"Plutus Consumer","description":"Plutus Consumer definition. This parameters are additional information supplied that the node will use to validate the execution of the Plutus Validator (smart contract). There are no strict mandatory properties as some data can be inferred by GC automatically now or in the future, or you may want to freely combine it, but `scriptHashHex` is required if you provide a `redeemer` "},"PlutusBundle":{"$ref":"common.json#/definitions/PlutusBundle","type":"object","title":"Plutus Bundle","description":"Plutus Bundle with properties required to interact with Smart Contracts. "},"ScriptPlutusCode":{"$ref":"common.json#/definitions/ScriptPlutusCode","type":"object","title":"Plutus Code","description":"Plutus Code to be compiled"},"ScriptMarloweCode":{"$ref":"common.json#/definitions/ScriptMarloweCode","type":"object","title":"Marlowe Code","description":"Marlowe Code to be compiled"},"ScriptHeliosCode":{"$ref":"common.json#/definitions/ScriptHeliosCode","type":"object","title":"Helios Code","description":"Helios Code to be compiled. Can be used not only to generate Plutus Validators and Parameterized Plutus Validators (Cardano Smart Contracts) but also Helios-compatible Plutus Data structures using parameter exports."},"NativeScriptHex":{"$ref":"common.json#/definitions/NativeScriptHex","type":"string","title":"Native Script (Hex)","description":"Native Script in hexadecimal encoding"},"ScriptPubKey":{"$ref":"common.json#/definitions/ScriptPubKey","title":"Public Key Native Script","description":"Require transactions to be signed using specific key signature"},"ScriptTimelockStart":{"$ref":"common.json#/definitions/ScriptTimelockStart","title":"Timelock Start Native Script","description":"Require transactions to be submitted after an specific slot number (blockchain time measure unit that equals 1 second)"},"ScriptTimelockExpiry":{"$ref":"common.json#/definitions/ScriptTimelockExpiry","title":"Timelock Expiry Native Script","description":"Require transactions to be submitted before an specific slot number (blockchain time measure unit that equals 1 second)"},"ScriptAll":{"$ref":"common.json#/definitions/ScriptAll","title":"All Native Script","description":"Require transactions to fullfil all the items from a list of native scripts"},"ScriptAny":{"$ref":"common.json#/definitions/ScriptAny","title":"Any Native Script","description":"Require transactions to fullfil any of the items from a list of native scripts"},"ScriptAtLeastN":{"$ref":"common.json#/definitions/ScriptAtLeastN","title":"At Least N Native Script","description":"Require transactions to fullfil a minimum number of items from a list of native scripts"},"NativeScript":{"$ref":"common.json#/definitions/NativeScript"},"PlutusScript":{"$ref":"common.json#/definitions/PlutusScript","type":"object","title":"Plutus Script","description":"Plutus on-chain validator code, also known as 'Cardano smart contracts'"},"PlutusData":{"$ref":"common.json#/definitions/PlutusData","type":"object","title":"Plutus Datum","description":"Data format supported by plutus scripts. Used on-chain on transaction Datums and Redeemers"},"StakeRegistration":{"$ref":"common.json#/definitions/StakeRegistration","type":"object","title":"Stake Registration Certificate","description":"Certificate to register on-chain a stake key or script"},"StakeDeregistration":{"$ref":"common.json#/definitions/StakeDeregistration","type":"object","title":"Stake De-Registration Certificate","description":"Certificate to de-register on-chain a stake key or script"},"StakeDelegation":{"$ref":"common.json#/definitions/StakeDelegation","type":"object","title":"Stake Delegation Certificate","description":"Certificate to delegate to a stake pool the coins of all addresses that are using an specific registered stake key or script as staking credential"},"CertificateHex":{"$ref":"common.json#/definitions/CertificateHex","type":"string","title":"Certificate (Hex)","description":"Any supported certificate in hexadecimal encoding"},"Certificate":{"$ref":"common.json#/definitions/Certificate","type":"object","title":"Certificate","description":"Generate a certificate to delegate stake or do other supported operations"},"TxAuxiliaryData":{"$ref":"common.json#/definitions/TxAuxiliaryData","type":"object","title":"Transaction Auxiliary Data","description":"Definition of a transaction auxiliary data or metadata"},"Asset":{"$ref":"common.json#/definitions/Asset","type":"object","title":"Asset","description":"Definition of a Cardano asset."},"MintAsset":{"$ref":"common.json#/definitions/MintAsset","type":"object","title":"Mint Asset","description":"Definition of a Cardano mint asset action. Positive quantity will mint, negative quantity will burn native assets."},"TxMint":{"$ref":"common.json#/definitions/TxMint","type":"object","title":"Transaction Mint","description":"Definition of a transaction mint action, where native assets can be minted or burned"},"TxCertificate":{"$ref":"common.json#/definitions/TxCertificate","type":"object","title":"Transaction Certificate","description":"Definition of a transaction certificate"},"TxInput":{"$ref":"common.json#/definitions/TxInput","type":"object","title":"Transaction Input","description":"Definition of a transaction input"},"TxInputRedeemable":{"$ref":"common.json#/definitions/TxInputRedeemable","type":"object","title":"Transaction Input","description":"Definition of a transaction input"},"TxOutput":{"$ref":"common.json#/definitions/TxOutput","type":"object","title":"Transaction Output","description":"Definition of a transaction output"},"TxWithdrawal":{"$ref":"common.json#/definitions/TxWithdrawal","type":"object","title":"Transaction Reward Withdrawal","description":"Definition of a transaction reward withdrawal"},"Tx":{"$ref":"common.json#/definitions/Tx","type":"object","title":"Transaction","description":"A Cardano transaction definition, with fields like inputs,outputs,mints,certificates,smart contracts and metadata"},"FileSystemPathMap":{"$ref":"common.json#/definitions/FileSystemPathMap","type":"object","title":"File System Paths","description":"Definition of a File System Path Map, a mapping of node absolute paths and their corresponding node type definitions"},"FileSystemSearchParams":{"$ref":"common.json#/definitions/FileSystemSearchParams","type":"object","title":"File System Search Parameters","description":"Definition of File System Search Parameters"},"NativeScriptCBORHex":{"$ref":"common.json#/definitions/NativeScriptCBORHex","type":"object","title":"Native Script (CBOR Hex)","description":"Require transactions to be signed using a Native Script, which is provided in `scriptHex` with hexadecimal encoding"},"NativeScriptName":{"$ref":"common.json#/definitions/NativeScriptName","type":"object","title":"Native Script Name","description":"Require transactions to be signed using a Native Script referenced by it's artifact name within same workspace. Name is usually generated using the `namePattern` property"},"NativeScriptPubKeyHash":{"$ref":"common.json#/definitions/NativeScriptPubKeyHash","type":"object","title":"Public Key Hash Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's hash `pubKeyHashHex`"},"NativeScriptPubKeyName":{"$ref":"common.json#/definitions/NativeScriptPubKeyName","type":"object","title":"Public Key Name Native Script","description":"Require transactions to be signed using an specific key signature. Key is referenced by it's artifact name `pubKeyName` within the same workspace. Name is usually generated using the `namePattern` property "},"NativeScriptTimelockStart":{"$ref":"common.json#/definitions/NativeScriptTimelockStart","type":"object","title":"Timelock Start Native Script","description":"Require transactions to be submitted after an specific slot number `slotNumStart` (blockchain time measure unit that equals 1 second)"},"NativeScriptTimelockExpiry":{"$ref":"common.json#/definitions/NativeScriptTimelockExpiry","type":"object","title":"Timelock Expiry Native Script","description":"Require transactions to be submitted before an specific slot number `slotNumEnd` (blockchain time measure unit that equals 1 second)"},"NativeScriptAll":{"$ref":"common.json#/definitions/NativeScriptAll","type":"object","title":"All Native Script","description":"Require transactions to fullfil `all` these items from a list of native scripts"},"NativeScriptAny":{"$ref":"common.json#/definitions/NativeScriptAny","type":"object","title":"Any Native Script","description":"Require transactions to fullfil `any` of the items from a list of native scripts"},"NativeScriptAtLeastN":{"$ref":"common.json#/definitions/NativeScriptAtLeastN","type":"object","title":"At Least N Native Script","description":"Require transactions to fullfil `atLeast` a minimum number of items from a list of native scripts (`ofThese`)"},"NativeScriptVariants":{"$ref":"common.json#/definitions/NativeScriptVariants"},"KeyDerivationParams":{"$ref":"common.json#/definitions/KeyDerivationParams","type":"object","title":"Key Derivation Parameters","description":"Parameters required to derive a child key pair from wallet root private key"},"AddressBuilderParams":{"$ref":"common.json#/definitions/AddressBuilderParams","type":"object","title":"Address Builder Parameters","description":"Parameters required to build Cardano Addresses"},"NamedArtifactParams":{"$ref":"common.json#/definitions/NamedArtifactParams","type":"object","title":"Named Artifact Parameters","description":"Parameters required to create an Named Artifact. Addresses, Keys and other artifacts, with an associated Named Artifact are shown on user interface and can be referenced by name on scripts. Unnamed artifacts became orphans, present on wallet artifact store but unreachable."},"WorkspaceCreationParams":{"$ref":"common.json#/definitions/WorkspaceCreationParams","type":"object","title":"Workspace Creation Parameters","description":"Parameters required to create a Workspace, a named group of addresses, keys and other artifacts. Users can switch between artifacts for instance to use more receiving addresses, multi-delegate stake, participate in DAOs, sign messages with special keys, and more... "},"WalletSetupLayer":{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},"COSE1DataSignature":{"$ref":"common.json#/definitions/COSE1DataSignature","type":"object","title":"COSE1 Data Signature Structure (CIP-8)","description":"The signature of some arbitrary data signed using CIP-8 specification."},"PasswordProvider":{"$ref":"common.json#/definitions/PasswordProvider","type":"object","title":"Password Provider","description":"Password providers methods"},"PreprocessorPasswordProvider":{"$ref":"common.json#/definitions/PreprocessorPasswordProvider","type":"object","title":"Pre-Processor Password Provider","description":"Password provider methods only for pre-processor stage functions"},"MultiSigProvider":{"$ref":"common.json#/definitions/MultiSigProvider","type":"object","title":"Multi-Signature Provider","description":"Multi-Signature methods to obtain all or some missing verification key signatures for one or more transactions"},"ScriptArguments":{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},"ScriptReturnModes":{"$ref":"common.json#/definitions/ScriptReturnModes","type":"object","title":"Script Return Modes","description":"Modes in which a script( a block of code), will return it results"},"ConditionProvider":{"$ref":"common.json#/definitions/ConditionProvider","type":"object","title":"Conditions Provider","description":"Condition methods to be used in functions like `await`"},"NativeScriptBuilderParams":{"$ref":"common.json#/definitions/NativeScriptBuilderParams","type":"object","title":"Native Script Builder Parameters","description":"Parameters required to build Cardano Native Scripts"}}},"await.json":{"$id":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met","examples":[{"type":"await","until":{"beneficiaryTimeLock":{"kind":"timer","unit":"seconds","value":10}}},{"type":"await","until":{"A":{"kind":"timer","unit":"seconds","value":15},"B":{"kind":"balance","asset":{"policyId":"ada","assetName":"ada","quantity":"5250000"}},"C":{"kind":"balance","address":"addr1q98f06pcrsn8x03uw0vlejw684fcu02waffvfscdsz0djgqd6j6v0fc04n5ehg292yxvs292vesrqqmxqfnp7yuwn7yq2vsyn7","is":"equal","asset":{"policyId":"d491234d8b40b63aceab0d7329c6db111c3634d9e0d3c6166c66c13b","assetName":"FakeUSD","quantity":"5"}}}}],"properties":{"type":{"type":"string","const":"await"},"until":{"title":"Condition List","description":"List or Key-Value Map of Conditions","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/ConditionProvider","type":"object","title":"Conditions Provider","description":"Condition methods to be used in functions like `await`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ConditionProvider","type":"object","title":"Conditions Provider","description":"Condition methods to be used in functions like `await`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ConditionProvider","type":"object","title":"Conditions Provider","description":"Condition methods to be used in functions like `await`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["type","until"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["await"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getPublicKeys.json":{"$id":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map","examples":[{"type":"getPublicKeys","keyPattern":"{artifactName}","limit":10,"offset":20},{"type":"getPublicKeys","keyPattern":"{path}","filter":{"isAccount":true,"accountIndex":1},"sort":"ascending"},{"type":"getPublicKeys","keyPattern":"account05_{artifactName}_{addressIndex}","filter":{"pathPrefix":"m/1852h/1815h/5h/"}}],"properties":{"type":{"type":"string","const":"getPublicKeys"},"keyPattern":{"default":"{kind}-{accountIndex}-{addressIndex}","description":"Pattern for naming each key of the resulting key-value mapping. You can use variables wrapped between `{` and `}`. Available templating variables are `limit`, `offset`, `index`, `position`, `count`, `maxOffset`, `sort`, `artifactKind`, `artifactRef`, `artifactKey`, `artifactName`, `pubKeyHashHex`, `kind`, `accountIndex`, `addressIndex`, `path`.","examples":["Item-{artifactName}","{artifactKind} {index}/{maxOffset}","{artifactKind} {position}/{count}"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"limit":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"offset":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"sort":{"anyOf":[{"type":"string","enum":["ascending","descending"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"filter":{"anyOf":[{"type":"object","properties":{"name":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"kind":{"anyOf":[{"type":"string","enum":["spend","stake"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"accountIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"addressIndex":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pubKeyHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKey","type":"string","title":"Public Key","description":"Public Key (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"pathPrefix":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isAccount":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isAddress":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWorkspacePublicKeys"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getAddresses.json":{"$id":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map.","examples":[{"type":"getAddresses","keyPattern":"{artifactName}"},{"type":"getAddresses","keyPattern":"{artifactName}:{address}","sort":"ascending","limit":10,"offset":20},{"type":"getAddresses","sort":"descending","filter":{"kind":"enterprise","isScript":true}},{"type":"getAddresses","keyPattern":"unique_address_result","filter":{"name":"Bob Address"}}],"properties":{"type":{"type":"string","const":"getAddresses"},"keyPattern":{"default":"{kind}-{paymentHashHex}-{stakingHashHex}","description":"Pattern for naming each key of the resulting key-value mapping. You can use variables wrapped between `{` and `}`. Available templating variables are `limit`, `offset`, `index`, `position`, `count`, `maxOffset`, `sort`, `artifactKind`, `artifactRef`, `artifactKey`, `artifactName`, `address`, `kind`, `paymentKeyHashHex`, `stakingKeyHashHex`, `paymentScriptHashHex`, `stakingScriptHashHex`, `paymentHashHex`, `stakingHashHex`, `rewardAddress`, `identityScriptHashHex`, `spendPubKeyName`, `stakePubKeyName`, `spendNativeScriptName`, `stakeNativeScriptName`, `spendPlutusScriptName`, `stakePlutusScriptName`, `icarusPubKeyName`, `spendCredentialName`, `stakeCredentialName`.","examples":["Item-{artifactName}","{artifactKind} {index}/{maxOffset}","{artifactKind} {position}/{count}"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"limit":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"offset":{"anyOf":[{"type":"number","minimum":0},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"sort":{"anyOf":[{"type":"string","enum":["ascending","descending"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"filter":{"anyOf":[{"type":"object","properties":{"name":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"kind":{"anyOf":[{"type":"string","enum":["unknown","enterprise","base","pointer","reward"]},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isPaymentKey":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isStakingKey":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isPaymentScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isStakingScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"isScript":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"rewardAddress":{"anyOf":[{"$ref":"common.json#/definitions/Address","type":"string","title":"Wallet Address","description":"Wallet Address (Bech32)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"identityScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"identityScriptHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendPubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendNativeScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakeNativeScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendPlutusScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePlutusScriptName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"icarusPubKeyName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"paymentKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakingKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"paymentScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakingScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"paymentHashHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakingHashHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"anyCredentialHashHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWorkspaceAddresses"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"setCurrentWorkspace.json":{"$id":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n","examples":[{"type":"setCurrentWorkspace","workspaceId":"MyCustomWorkspace"}],"properties":{"type":{"type":"string","const":"setCurrentWorkspace"},"workspaceId":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","workspaceId"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["setCurrentWorkspace"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"loadConfig.json":{"$id":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n","examples":[{"type":"loadConfig","updateId":"demo","layers":[{"type":"Workspace","items":[{"namePattern":"derivations","titlePattern":"Derivations","descriptionPattern":"Wallet settings to test key derivations"}]},{"type":"Key","workspaceIds":["derivations"],"namePattern":"{index}_{key}_{kind}_{accountIndex}_{addressIndex}","items":[{"namePattern":"{kind}{addressIndex}","kind":"spend","accountIndex":5,"addressIndex":10},{"namePattern":"{kind}{addressIndex}","kind":"stake","accountIndex":5,"addressIndex":10},{"namePattern":"{kind}{addressIndex}Copy","pathPattern":"m/1852h/1815h/5h/0/10"},{"namePattern":"{kind}{addressIndex}Copy","pathPattern":"m/1852h/1815h/5h/2/10"},{"pathPattern":"m/1852h/1815h/5h/1/0"},{"pathPattern":"m/1852h/1815h/0h/0/{index}"},{"pathPattern":"m/1852h/1815h/1h/0/{index}"},{"pathPattern":"m/1852h/1815h/2h/0/{index}"},{"pathPattern":"m/1852h/1815h/3h/0/{index}"},{"pathPattern":"m/1852h/1815h/4h/0/{index}"}]}]},{"type":"loadConfig","updateId":"Dao","layers":[{"type":"Workspace","items":[{"namePattern":"dao","titlePattern":"DAO","descriptionPattern":"Wallet settings that creates a shared treasury of at least 3 of 4 signers for spending and staking operations"}]},{"type":"Key","workspaceIds":["dao"],"items":[{"namePattern":"spend-member","kind":"spend","accountIndex":0,"addressIndex":0},{"namePattern":"stake-member","kind":"stake","accountIndex":0,"addressIndex":0}]},{"type":"NativeScript","workspaceIds":["dao"],"namePattern":"dao_{key}_script","items":{"spend":{"atLeast":3,"ofThese":{"Member_0":{"pubKeyHashHex":"13e93a48c66322d79fcd83d581f2348b567039ab3d988ff8d6286b3d"},"Member_1":{"pubKeyHashHex":"4cd0faea320a38e4c49e32dc40df1ba4b8eadb0ef4c31522c3cc56f1"},"Member_2":{"pubKeyHashHex":"83a5351d7891145760ff96e29c375a43355b085d50313be266d4977d"},"Member_3":{"pubKeyHashHex":"755ff75c3a2cc16730139793bfca8f5a2b78c29547700080d34e2273"}}},"stake":{"atLeast":3,"ofThese":{"Member_0":{"pubKeyHashHex":"c235dad80af6f95715adfd7ecc3ffc844c502f335e37ba019a57b198"},"Member_1":{"pubKeyHashHex":"c8a058e99d844c47f47cb04cead9ea5a7ffca8432f7e054635298e47"},"Member_2":{"pubKeyHashHex":"abca9cd9d3bb75d7febd99dfeb8fba0e0550a038d9e09206a82b706f"},"Member_3":{"pubKeyHashHex":"814da95aef8621d4e4ba5a0f7c379a5583aaf1244ef04269d3f8ff93"}}}}},{"type":"Address","workspaceIds":["dao"],"items":[{"namePattern":"Signer","spendPubKeyName":"spend-member","stakePubKeyName":"stake-member"},{"namePattern":"Shared Treasury","spendNativeScriptName":"dao_spend_script","stakeNativeScriptName":"dao_stake_script"}]}]},{"type":"loadConfig","updateId":"MultiStakeDelegation","layers":[{"type":"Workspace","items":[{"namePattern":"demos","titlePattern":"Demos","descriptionPattern":"My custom multi-delegation wallet settings"}]},{"type":"Key","workspaceIds":["demos"],"items":[{"namePattern":"SpendKey-main","kind":"spend","accountIndex":0,"addressIndex":0},{"namePattern":"StakeKey-main","kind":"stake","accountIndex":0,"addressIndex":0},{"namePattern":"SpendKey-0","kind":"spend","accountIndex":5,"addressIndex":92},{"namePattern":"StakeKey-A","kind":"stake","accountIndex":34,"addressIndex":423},{"namePattern":"StakeKey-B","kind":"stake","accountIndex":632,"addressIndex":7434},{"namePattern":"StakeKey-C","kind":"stake","accountIndex":26,"addressIndex":754}]},{"type":"Address","workspaceIds":["demos"],"items":[{"namePattern":"Address-main","spendPubKeyName":"SpendKey-main","stakePubKeyName":"StakeKey-main"},{"namePattern":"Address-0A","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-A"},{"namePattern":"Address-0B","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-B"},{"namePattern":"Address-0C","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-C"},{"namePattern":"RewardAddress-A","stakePubKeyName":"StakeKey-A"},{"namePattern":"RewardAddress-B","stakePubKeyName":"StakeKey-B"},{"namePattern":"RewardAddress-C","stakePubKeyName":"StakeKey-C"}]}]}],"properties":{"type":{"type":"string","const":"loadConfig"},"updateId":{"description":"If all cryptographic key derivations, address, and other artifact building succeed, and update of wallet settings in local storage will take place under this `updateId` as reference.","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"layers":{"title":"Wallet Setup Layers","description":"List or Key-Value Map of Wallet Setup Layers","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["type","layers","updateId"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":true},"permissions":{"type":"array","const":["loadConfig"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"saveConfig.json":{"$id":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n","examples":[{"type":"saveConfig","layers":[{"type":"Workspace","items":[{"namePattern":"derivations","titlePattern":"Derivations","descriptionPattern":"Wallet settings to test key derivations"}]},{"type":"Key","workspaceIds":["derivations"],"namePattern":"{index}_{key}_{kind}_{accountIndex}_{addressIndex}","items":[{"namePattern":"{kind}{addressIndex}","kind":"spend","accountIndex":5,"addressIndex":10},{"namePattern":"{kind}{addressIndex}","kind":"stake","accountIndex":5,"addressIndex":10},{"namePattern":"{kind}{addressIndex}Copy","pathPattern":"m/1852h/1815h/5h/0/10"},{"namePattern":"{kind}{addressIndex}Copy","pathPattern":"m/1852h/1815h/5h/2/10"},{"pathPattern":"m/1852h/1815h/5h/1/0"},{"pathPattern":"m/1852h/1815h/0h/0/{index}"},{"pathPattern":"m/1852h/1815h/1h/0/{index}"},{"pathPattern":"m/1852h/1815h/2h/0/{index}"},{"pathPattern":"m/1852h/1815h/3h/0/{index}"},{"pathPattern":"m/1852h/1815h/4h/0/{index}"}]}]},{"type":"saveConfig","layers":[{"type":"Workspace","items":[{"namePattern":"dao","titlePattern":"DAO","descriptionPattern":"Wallet settings that creates a shared treasury of at least 3 of 4 signers for spending and staking operations"}]},{"type":"Key","workspaceIds":["dao"],"items":[{"namePattern":"spend-member","kind":"spend","accountIndex":0,"addressIndex":0},{"namePattern":"stake-member","kind":"stake","accountIndex":0,"addressIndex":0}]},{"type":"NativeScript","workspaceIds":["dao"],"namePattern":"dao_{key}_script","items":{"spend":{"atLeast":3,"ofThese":{"Member_0":{"pubKeyHashHex":"13e93a48c66322d79fcd83d581f2348b567039ab3d988ff8d6286b3d"},"Member_1":{"pubKeyHashHex":"4cd0faea320a38e4c49e32dc40df1ba4b8eadb0ef4c31522c3cc56f1"},"Member_2":{"pubKeyHashHex":"83a5351d7891145760ff96e29c375a43355b085d50313be266d4977d"},"Member_3":{"pubKeyHashHex":"755ff75c3a2cc16730139793bfca8f5a2b78c29547700080d34e2273"}}},"stake":{"atLeast":3,"ofThese":{"Member_0":{"pubKeyHashHex":"c235dad80af6f95715adfd7ecc3ffc844c502f335e37ba019a57b198"},"Member_1":{"pubKeyHashHex":"c8a058e99d844c47f47cb04cead9ea5a7ffca8432f7e054635298e47"},"Member_2":{"pubKeyHashHex":"abca9cd9d3bb75d7febd99dfeb8fba0e0550a038d9e09206a82b706f"},"Member_3":{"pubKeyHashHex":"814da95aef8621d4e4ba5a0f7c379a5583aaf1244ef04269d3f8ff93"}}}}},{"type":"Address","workspaceIds":["dao"],"items":[{"namePattern":"Signer","spendPubKeyName":"spend-member","stakePubKeyName":"stake-member"},{"namePattern":"Shared Treasury","spendNativeScriptName":"dao_spend_script","stakeNativeScriptName":"dao_stake_script"}]}]},{"type":"saveConfig","layers":[{"type":"Workspace","items":[{"namePattern":"demos","titlePattern":"Demos","descriptionPattern":"My custom multi-delegation wallet settings"}]},{"type":"Key","workspaceIds":["demos"],"items":[{"namePattern":"SpendKey-main","kind":"spend","accountIndex":0,"addressIndex":0},{"namePattern":"StakeKey-main","kind":"stake","accountIndex":0,"addressIndex":0},{"namePattern":"SpendKey-0","kind":"spend","accountIndex":5,"addressIndex":92},{"namePattern":"StakeKey-A","kind":"stake","accountIndex":34,"addressIndex":423},{"namePattern":"StakeKey-B","kind":"stake","accountIndex":632,"addressIndex":7434},{"namePattern":"StakeKey-C","kind":"stake","accountIndex":26,"addressIndex":754}]},{"type":"Address","workspaceIds":["demos"],"items":[{"namePattern":"Address-main","spendPubKeyName":"SpendKey-main","stakePubKeyName":"StakeKey-main"},{"namePattern":"Address-0A","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-A"},{"namePattern":"Address-0B","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-B"},{"namePattern":"Address-0C","spendPubKeyName":"SpendKey-0","stakePubKeyName":"StakeKey-C"},{"namePattern":"RewardAddress-A","stakePubKeyName":"StakeKey-A"},{"namePattern":"RewardAddress-B","stakePubKeyName":"StakeKey-B"},{"namePattern":"RewardAddress-C","stakePubKeyName":"StakeKey-C"}]}]}],"properties":{"type":{"type":"string","const":"saveConfig"},"layers":{"title":"Wallet Setup Layers","description":"List or Key-Value Map of Wallet Setup Layers","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/WalletSetupLayer","type":"object","title":"Wallet Setup Layer","description":"Definition of a Wallet Setup Layer"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["type","layers"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":true},"permissions":{"type":"array","const":["saveConfig","signTxs","submitTx","loadConfig"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"enableTerminalMode.json":{"$id":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone.","examples":[{"type":"enableTerminalMode"}],"properties":{"type":{"type":"string","const":"enableTerminalMode"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":0},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["setTerminalMode"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"data.json":{"$id":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used.","examples":[{"type":"data","value":"🚀 Hello world!"},{"type":"data","value":["foo","bar","baz",true,null,{"nested":{"object":{"inside":"here"}}}]}],"properties":{"type":{"type":"string","const":"data"},"value":{}},"required":["type","value"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":0},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["useConstantData"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"searchFs.json":{"$id":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs.","examples":[{"type":"searchFs","params":[{"keyWord":".jpg"}]},{"type":"searchFs","params":[{"fileHash":"dc4536f4fdde94bfe0cdae32774f5e5dd25164a144d291b4b0a0eb40720dfdbb1426245ede6925feedacef897d306853acc8b4b55cae888908a9988fd70550bc"},{"assetName":"gc.disk"}]},{"type":"searchFs","params":[{"policyId":"1170d12887c70593e40938a5ff1832f9eb2b8e4a328a982621b36a57"}]}],"properties":{"type":{"type":"string","const":"searchFs"},"useFingerprintURIs":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"params":{"title":"File System Search Parameters","description":"List or Key-Value Map of File System Search Parameters.","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemSearchParams","type":"object","title":"File System Search Parameters","description":"Definition of File System Search Parameters"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemSearchParams","type":"object","title":"File System Search Parameters","description":"Definition of File System Search Parameters"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemSearchParams","type":"object","title":"File System Search Parameters","description":"Definition of File System Search Parameters"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["type","params"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["searchFs"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"buildFsTxs.json":{"$id":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)","examples":[{"type":"buildFsTxs","description":"My perpetual Google Drive but over Cardano","assetName":"myEternalFiles.disk","layers":[{"//automatic/directory/creation/and/empty/one/at/the/end":{"kind":"directory"},"//myFiles/readme.txt":{"kind":"file","fileHex":"546869732077696c6c206265206f7665727772697474656e2c20616e64206e657665722073746f726564206f6e2d636861696e"}},{"//myFiles/readme.txt":{"kind":"file","fileHex":"3f3f2057656c636f6d6520746f204743465321204f6e6c792066696c6573797374656d206f7665722043617264616e6f21"}}]},{"type":"buildFsTxs","description":"my perpetual encrypted files on-chain with custom minting native script","assetName":"myEncryptedFiles.disk","replicas":"1","noAppend":false,"noIndexFileNames":false,"noIndexFileData":false,"mintScriptHex":"82018382041a0005d90d8200581c111fc9cc6fd34bd2783001b3fbf7b456beb93a38d24a1e06542dc6fb82051a0008e909","layers":[{"//data/encryptedData.crypt":{"kind":"file","fileHex":"{strToHex(get('cache.dependencies.encryptedHexData'))}"},"//scripts/encryptedScript.crypt":{"kind":"file","fileHex":"{strToHex(get('cache.dependencies.encryptedHexScript'))}"}}]},{"type":"buildFsTxs","description":"No new data will be stored on-chain because of external file link used","assetName":"linkedFiles.disk","layers":[{"//myFiles/readme.txt":{"kind":"file","fileHex":"546869732077696c6c206265206f7665727772697474656e2c20616e64206e657665722073746f726564206f6e2d636861696e"}},{"//myFiles/readme.txt":{"kind":"extLink","fileHash":"ba4e5dbcb988927a01f97b1856e244b82a72d736b7462e323d16f648c5bae247910bdd0ded0e4e7c0a9049b988aa2f7dc1e65754aefb1287deba686e91f1a791","fromAddresses":["addr_test1qrv2myc3je5q7fxfnajjgj4qnynhdp82rsylnj2lm8yawthnawvrn7emu0nxkvcte8fjz02f3s7krg07fvekn8cymnjsn0kg5x"]}}]}],"properties":{"type":{"type":"string","const":"buildFsTxs"},"name":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"description":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"assetName":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"mintScriptHex":{"anyOf":[{"$ref":"common.json#/definitions/NativeScriptHex","type":"string","title":"Native Script (Hex)","description":"Native Script in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"replicas":{"anyOf":[{"$ref":"common.json#/definitions/Quantity","type":"string","title":"Quantity","description":"Quantity (Positive BigNum)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"noAppend":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"noIndexFileNames":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"noIndexFileData":{"anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"layers":{"title":"File System Path Maps","description":"List or Key-Value Map of File System Path Maps, layers that will be merged into a final one (sort of layers matters)","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemPathMap","type":"object","title":"File System Paths","description":"Definition of a File System Path Map, a mapping of node absolute paths and their corresponding node type definitions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemPathMap","type":"object","title":"File System Paths","description":"Definition of a File System Path Map, a mapping of node absolute paths and their corresponding node type definitions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/FileSystemPathMap","type":"object","title":"File System Paths","description":"Definition of a File System Path Map, a mapping of node absolute paths and their corresponding node type definitions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]}},"required":["type","layers","assetName"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["buildTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getCurrentSlot.json":{"$id":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)","examples":[{"type":"getCurrentSlot"}],"properties":{"type":{"type":"string","const":"getCurrentSlot"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["getNetworkData"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getCurrentAddress.json":{"$id":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used","examples":[{"type":"getCurrentAddress"}],"properties":{"type":{"type":"string","const":"getCurrentAddress"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWalletAddress"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getMainAddress.json":{"$id":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet","examples":[{"type":"getMainAddress"}],"properties":{"type":{"type":"string","const":"getMainAddress"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWalletAddress"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getCurrentIdentity.json":{"$id":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity","examples":[{"type":"getCurrentIdentity"}],"properties":{"type":{"type":"string","const":"getCurrentIdentity"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareAddressIdentity"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getMainIdentity.json":{"$id":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity","examples":[{"type":"getMainIdentity"}],"properties":{"type":{"type":"string","const":"getMainIdentity"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareAddressIdentity"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getName.json":{"$id":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name","examples":[{"type":"getName"}],"properties":{"type":{"type":"string","const":"getName"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWalletName"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getSpendingPublicKey.json":{"$id":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key","examples":[{"type":"getSpendingPublicKey"}],"properties":{"type":{"type":"string","const":"getSpendingPublicKey"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWalletPublicKey"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"getStakingPublicKey.json":{"$id":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key","examples":[{"type":"getStakingPublicKey"}],"properties":{"type":{"type":"string","const":"getStakingPublicKey"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["shareWalletPublicKey"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"deriveKeys.json":{"$id":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names","examples":[{"type":"deriveKeys","keys":{"James":{"name":"James","kind":"spend","accountIndex":34,"addressIndex":423},"Robe":{"name":"Robe","kind":"stake","accountIndex":632,"addressIndex":7434},"Julie":{"name":"Julie","kind":"spend","accountIndex":26,"addressIndex":754},"spend10":{"name":"spend10","path":"m/1852h/1815h/5h/0/10"},"stake10":{"name":"stake10","path":"m/1852h/1815h/5h/2/10"}}}],"properties":{"type":{"type":"string","const":"deriveKeys"},"keys":{"title":"Key Derivations","description":"List or Key-Value Map of Key Derivations","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivation","type":"object","title":"Key Derivation","description":"Parameters required to derive a child key pair from wallet root private key"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivation","type":"object","title":"Key Derivation","description":"Parameters required to derive a child key pair from wallet root private key"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/KeyDerivation","type":"object","title":"Key Derivation","description":"Parameters required to derive a child key pair from wallet root private key"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"extraPermissions":{"title":"Extra permission declaration for expected runtime behavior","description":"Some operations can require on runtime extra permissions when it arguments are dynamically generated, for example when using inline GCScript macros. If there is a difference between the amount of permissions calculated on preprocessor stage and the actual permissions being requested on runtime, script execution will stop with a critical error. If you are using inline macros and plan to require extra permissions on runtime, declare them here.","type":"object","minProperties":1,"properties":{"deriveKeys":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"shareWalletPublicKey":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1}},"additionalProperties":false}},"required":["type","keys"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":true},"customRuntimePermissionDetection":{"type":"boolean","const":true},"permissions":{"type":"array","const":["deriveVolatileKeys","shareWalletPublicKey"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"buildAddress.json":{"$id":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future.","examples":[{"type":"buildAddress","name":"DelegatedAddress","addr":{"spendPubKeyHashHex":"{get('cache.dependencies.keys.PaymentKey.pubKeyHashHex')}","stakePubKeyHashHex":"{get('cache.dependencies.keys.StakeKey.pubKeyHashHex')}"}},{"type":"buildAddress","name":"EnterpriseAddress","addr":{"spendPubKeyHashHex":"{get('cache.HDSpendKeys.0.pubKeyHashHex')}"}},{"type":"buildAddress","name":"SmartContractDelegatedAddress","addr":{"spendScriptHashHex":"{get('cache.dependencies.smartContract.scriptHashHex')}","stakePubKeyHashHex":"{get('cache.dependencies.stakeCredential')}"}},{"type":"buildAddress","name":"RewardAddress","addr":{"stakePubKeyHashHex":"{get('cache.dependencies.keys.StakeKey.pubKeyHashHex')}"}}],"properties":{"type":{"type":"string","const":"buildAddress"},"name":{"type":"string","title":"Name of this address in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide."},"addr":{"anyOf":[{"type":"object","properties":{"spendPubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakePubKeyHashHex":{"anyOf":[{"$ref":"common.json#/definitions/PublicKeyHash","type":"string","title":"Public Key Hash","description":"Public Key Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"spendScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"stakeScriptHashHex":{"anyOf":[{"$ref":"common.json#/definitions/ScriptHash","type":"string","title":"Native Script or Plutus Script Hash","description":"Native Script or Plutus Script  (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"icarusPubKeyHex":{"anyOf":[{"$ref":"common.json#/definitions/BIP32PublicKeyHex","type":"string","title":"BIP32 Public Key","description":"BIP32 Public Key (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","name"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["createVolatileAddress","cryptography","shareWalletAddress"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"certificate.json":{"$id":"certificate.json","type":"object","title":"Certificate","description":"Build certificates","examples":[{"type":"certificate","cert":{"kind":"StakeRegistration","pubKeyHashHex":"66490dcb084e79c18c10fba8ee6ab641944581a4486269ef884012c4"}},{"type":"certificate","cert":{"kind":"StakeDeregistration","scriptHashHex":"c3c2f0093f5b02e0635cd9f1895896138b31959b7cee3f97c4c9b8a3"}},{"type":"certificate","cert":{"kind":"StakeDelegation","scriptHashHex":"793f8c8cffba081b2a56462fc219cc8fe652d6a338b62c7b134876e7","poolKeyHashHex":"ff23a2a1c17e0230a68c824c37a088e0abf9f6522f473036719f3460"}},{"type":"certificate","cert":{"kind":"StakeRegistration","pubKeyHashHex":"{get('cache.derivations.Bob.pubKeyHashHex')}"}},{"type":"certificate","cert":{"kind":"StakeDeregistration","scriptHashHex":"{get('cache.dependencies.nativeScript01.scriptHashHex')}"}},{"type":"certificate","cert":{"kind":"StakeDelegation","scriptHashHex":"{get('cache.dependencies.smartContract01.scriptHashHex')}","poolKeyHashHex":"{get('cache.dependencies.poolHash')}"}}],"properties":{"type":{"type":"string","const":"certificate"},"name":{"type":"string","title":"Name of this certificate in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide. If name is present, this item will be stored locally on you wallet"},"cert":{"$ref":"common.json#/definitions/Certificate","type":"object","title":"Certificate","description":"Generate a certificate to delegate stake or do other supported operations"},"extras":{"title":"Return extra data","description":"When set to `true` it will return more information, not just the hexadecimal encoded CBOR of the built certificate","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","cert"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["cryptography","createCertificates"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"nativeScript.json":{"$id":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts","examples":[{"type":"nativeScript","script":{"scriptHex":"82018382041a0005d90d8200581c111fc9cc6fd34bd2783001b3fbf7b456beb93a38d24a1e06542dc6fb82051a0008e909"}},{"type":"nativeScript","name":"NFTMintingScript","script":{"all":[{"pubKeyHashHex":"{get('cache.keyOwner.pubKeyHashHex')}"},{"scriptHex":"{get('cache.scripts.timeWindow.scriptHex')}"},{"scriptHex":"{get('cache.scripts.embeddedMintingPolicy.scriptHex')}"}]}},{"type":"nativeScript","script":{"all":{"Founders":{"atLeast":2,"ofThese":[{"pubKeyHashHex":"{get('cache.gimbalabs.James.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Robe.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Julie.pubKeyHashHex')}"}]},"Members":{"all":[{"pubKeyHashHex":"{get('cache.gimbalabs.Member01.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Member02.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Member03.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Member04.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Member05.pubKeyHashHex')}"},{"any":[{"pubKeyHashHex":"{get('cache.gimbalabs.James.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Robe.pubKeyHashHex')}"},{"pubKeyHashHex":"{get('cache.gimbalabs.Julie.pubKeyHashHex')}"}]}]},"VotingWindow":{"any":{"month01":{"all":[{"slotNumStart":"383245"},{"slotNumEnd":"383945"}]},"month02":{"all":[{"slotNumStart":"483245"},{"slotNumEnd":"483945"}]},"month03":{"all":[{"slotNumStart":"583245"},{"slotNumEnd":"583945"}]}}}}}}],"properties":{"type":{"type":"string","const":"nativeScript"},"name":{"type":"string","title":"Name of this native script in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide. If name is present, this item will be stored locally on you wallet"},"script":{"$ref":"common.json#/definitions/NativeScript"}},"required":["type","script"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["cryptography","createNativeScripts"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"plutusScript.json":{"$id":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n","examples":[{"type":"plutusScript","script":{"scriptHex":"4746010000222499","lang":"plutus_v2"}},{"type":"plutusScript","script":{"heliosCode":"{replaceAll(hexToStr('0a7370656e64696e672074696d655f6c6f636b0a0a73747275637420446174756d207b0a202020206c6f636b556e74696c3a20202054696d650a202020206f776e65723a202020202020205075624b657948617368202f2f20746865206f776e65722063616e20616c7761797320756e6c6f636b20746865206173736574730a2020202062656e65666963696172793a205075624b657948617368202f2f2062656e65666963696172792063616e206f6e6c7920756e6c6f636b207468652061737365747320616674657220276c6f636b556e74696c270a7d0a0a66756e63206d61696e28646174756d3a20446174756d2c205f2c206374783a20536372697074436f6e7465787429202d3e20426f6f6c207b0a2020202074783a205478203d206374782e74783b0a202020206e6f773a2054696d65203d2074782e74696d655f72616e67652e73746172743b0a0a2020202074782e69735f7369676e65645f627928646174756d2e6f776e657229207c7c20280a202020202020202074782e69735f7369676e65645f627928646174756d2e62656e6566696369617279292026260a20202020202020206e6f77203e20646174756d2e6c6f636b556e74696c0a20202020290a7d0a20202020202020200a636f6e7374204558414d504c455f444154554d203a446174756d203d20446174756d7b0a2020202054696d653a3a6e6577284578616d706c6554696d65292c0a202020205075624b6579486173683a3a6e657728233031323334353637383961626364663031323334353637383961626364663031323334353637383961626364663031323334353637383961292c0a202020205075624b6579486173683a3a6e657728236664636261393837363534333231306664636261393837363534333231306664636261393837363534333231306664636261393837363534290a7d0a0a'),'ExampleTime','1234')}","parameters":["EXAMPLE_DATUM"],"version":"0.15.2","simplify":false}}],"properties":{"type":{"type":"string","const":"plutusScript"},"name":{"type":"string","title":"Name of this Plutus Script in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide. If name is present, this item will be stored locally on you wallet"},"script":{"$ref":"common.json#/definitions/PlutusScript","type":"object","title":"Plutus Script","description":"Plutus on-chain validator code, also known as 'Cardano smart contracts'"}},"required":["type","script"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["cryptography","createPlutusScripts"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"plutusData.json":{"$id":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes","examples":[{"type":"plutusData","data":{"fromJSON":{"schema":1,"obj":{"int":42}}}},{"type":"plutusData","data":{"fromJSON":{"schema":1,"obj":{"constructor":0,"fields":[{"int":42}]}}}},{"type":"plutusData","data":{"fromJSON":{"schema":1,"obj":{"int":"{get('args.id')}"}}}},{"type":"plutusData","data":{"fromJSON":{"schema":1,"obj":"{get('cache.dataObj')}"}}}],"properties":{"type":{"type":"string","const":"plutusData"},"data":{"$ref":"common.json#/definitions/PlutusData","type":"object","title":"Plutus Datum","description":"Data format supported by plutus scripts. Used on-chain on transaction Datums and Redeemers"}},"required":["type","data"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["cryptography"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"signDataWithAddress.json":{"$id":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification.","examples":[{"type":"signDataWithAddress","address":"addr_test1qqgpat9pkufccdwss659culgcrpezfhq3fp3pcl8ec5v2u8nawvrn7emu0nxkvcte8fjz02f3s7krg07fvekn8cymnjs0ff9xn","dataHex":"f09f9a802048656c6c6f20576f726c64206f66204349502d382064617461207369676e696e6721"},{"type":"signDataWithAddress","address":"{get('cache.usingMainAddress.address')}","dataHex":"{get('cache.dependencies.dataHex')}"}],"properties":{"type":{"type":"string","const":"signDataWithAddress"},"address":{"description":"Address to be used for signing `dataHex` data. Can be Enterprise, Base, Pointer or Reward Cardano Shelley Addresses.","anyOf":[{"$ref":"common.json#/definitions/Address","type":"string","title":"Wallet Address","description":"Wallet Address (Bech32)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","address","dataHex"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["signData","shareWalletPublicKey","cryptography"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"verifySignatureWithAddress.json":{"$id":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification.","examples":[{"type":"verifySignatureWithAddress","address":"addr_test1qqgpat9pkufccdwss659culgcrpezfhq3fp3pcl8ec5v2u8nawvrn7emu0nxkvcte8fjz02f3s7krg07fvekn8cymnjs0ff9xn","dataHex":"f09f9a802048656c6c6f20576f726c64206f66204349502d382064617461207369676e696e6721","dataSignature":{"signature":"845846a201276761646472657373583900101eaca1b7138c35d086a85c73e8c0c39126e08a4310e3e7ce28c570f3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce5a166686173686564f45827f09f9a802048656c6c6f20576f726c64206f66204349502d382064617461207369676e696e6721584064b79491ccc20e16dffb6e9c6fd3c93b37fa399ed0b57b8c020a1b4c1a4e7d617877b27e45a559a169e8fe6c1f5c62f97a5b860662efec7dc4945690bfc74a05","key":"a401010327200621582001b22eaa526e866ca9977ea8f6ad6bc1a0fda81370828391f771d33e219eaa63"}},{"type":"verifySignatureWithAddress","address":"{get('cache.usingMainAddress.address')}","dataHex":"{get('cache.dependencies.dataHex')}","dataSignature":"{get('cache.usingMainAddress.sign')}"}],"properties":{"type":{"type":"string","const":"verifySignatureWithAddress"},"address":{"description":"Address to be used for signing `dataHex` data. Can be Enterprise, Base, Pointer or Reward Cardano Shelley Addresses.","anyOf":[{"$ref":"common.json#/definitions/Address","type":"string","title":"Wallet Address","description":"Wallet Address (Bech32)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"dataSignature":{"description":"CIP-8 COSE1 data signature structure","anyOf":[{"$ref":"common.json#/definitions/COSE1DataSignature","type":"object","title":"COSE1 Data Signature Structure (CIP-8)","description":"The signature of some arbitrary data signed using CIP-8 specification."},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","address","dataHex","dataSignature"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["verify","cryptography"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"encrypt.json":{"$id":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message.","examples":[{"type":"encrypt","requirePassword":{"kind":"modal","description":"A strong password is required. Use suggested one?","weak":false,"default":"[,$Kl)+9]v_PN!7"},"messageHex":"3f3f48656c6c6f20776f726c64206f66207765623321"},{"type":"encrypt","requirePassword":{"kind":"modal","description":"A password is required to encrypt this data.\n Please override this password suggestion","weak":"{get('cache.config.useWeakPassword')}","default":"{get('cache.config.defaultPassword')}"},"messageHex":"{strToHex(objToJson(get('cache.dataToEncrypt')))}"}],"properties":{"type":{"type":"string","const":"encrypt"},"requirePassword":{"$ref":"common.json#/definitions/PasswordProvider","type":"object","title":"Password Provider","description":"Password providers methods"},"salt":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"nonce":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"messageHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","requirePassword","messageHex"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["encrypt","cryptography"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"decrypt.json":{"$id":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message.","examples":[{"type":"decrypt","requirePassword":{"kind":"modal","description":"A strong password is required to encrypt this message. Try using default?","weak":false,"default":"[,$Kl)+9]v_PN!7"},"encryptedMessageHex":"12a02a639c3cd875c502009d5df302c9ffce771e668d9b6fefcf1ff0366d141522d8daad8a767f20647513be45028ed1f9b44bd94518a0f3fcf8d1e334bb523fa1b99d55d30992eb357fd97a17e31deb7214"},{"type":"decrypt","requirePassword":{"kind":"modal","description":"A password is required to encrypt this message. Use default?","weak":"{get('cache.config.useWeakPassword')}","default":"{get('cache.config.defaultPassword')}"},"encryptedMessageHex":"{get('cache.dataToDecrypt')}"}],"properties":{"type":{"type":"string","const":"decrypt"},"requirePassword":{"$ref":"common.json#/definitions/PasswordProvider","type":"object","title":"Password Provider","description":"Password providers methods"},"encryptedMessageHex":{"anyOf":[{"$ref":"common.json#/definitions/Bytes","type":"string","title":"Bytes (hex)","description":"Bytes in hexadecimal encoding"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","requirePassword","encryptedMessageHex"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["decrypt","cryptography"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"submitTx.json":{"$id":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction","properties":{"type":{"type":"string","const":"submitTx"},"txHex":{"type":"string"},"name":{"type":"string","title":"Name of this transaction in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide.","examples":["Half signed transaction #4","Pay 5 ADA to Charles"]},"later":{"type":"boolean"},"wait":{"type":"boolean"}},"required":["type","txHex"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["submitTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"signTx.json":{"$id":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys","properties":{"type":{"type":"string","const":"signTx"},"name":{"type":"string","title":"Name of this transaction in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide.","examples":["Half signed transaction #4","Pay 5 ADA to Charles"]},"txHex":{"type":"string"}},"required":["type","txHex"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["signTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"awaitTx.json":{"$id":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain.","properties":{"type":{"type":"string","const":"awaitTx"},"txHash":{"anyOf":[{"$ref":"common.json#/definitions/TransactionHash","type":"string","title":"Transaction Hash","description":"Transaction Hash (hexadecimal)"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","txHash"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["awaitTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"submitTxs.json":{"$id":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n","examples":[{"type":"submitTxs","txs":["84a600818258203f7439fc7123a0bb6628aa4e94163233c01c905b26c02566a3ee2793e57b01dc01018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001ff8ca89e021a0003296d075820b1e936fe521b1a830676e10e6f5c74d5d49011a80a047feebcf3b442442071a30e81581cded983764fdb27ff993ce0257e64e20cba99348ad3721a59e8c628190f00a10081825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a58270558403539d882acd6c425221f0abe14fe19d8f1b77227245004e6749599ffd26bdd24da39e59e56553e9b7d655426d608bbe89fd9f5d262f87866aef55fb90c4c9708f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720316474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a"]},{"type":"submitTxs","namePattern":"Submitted Transaction #{key} from on-the-fly generated and signed CBORs","txs":"{get('cache.stage2_sign_transactions')}"},{"type":"submitTxs","namePattern":"Multisig Transaction #{key}","mode":"parallel","txs":["84a600818258203f7439fc7123a0bb6628aa4e94163233c01c905b26c02566a3ee2793e57b01dc01018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001ff8ca89e021a0003296d075820b1e936fe521b1a830676e10e6f5c74d5d49011a80a047feebcf3b442442071a30e81581cded983764fdb27ff993ce0257e64e20cba99348ad3721a59e8c628190f00a10081825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a58270558403539d882acd6c425221f0abe14fe19d8f1b77227245004e6749599ffd26bdd24da39e59e56553e9b7d655426d608bbe89fd9f5d262f87866aef55fb90c4c9708f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720316474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a","84a60081825820426924164b1c07dbda582cc4d88c6182630c6a85896ad5be742fefe1def0865803018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001ff2ed3e3021a0003296d075820db1442613240f575570d542be5e9141f34d79482f07e1535d0ac883868d6a6440e81581c54c6914ec2a61707bcd1a1a958a6d0dfcbe54f013915c4bb1412be420f00a10082825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a5827055840364eaac515830fe353d3505559e024c3263f82a08c3ece22012a1333561df6e8694cafddef8b9ae55d3160fad292d96a224696d13da3bebe92cd9785a481c30c82582058808596d82738aa09b3bd7c61321f9e63eb91a63e2d7f0637060627508c4e3c5840f2b0809a193e5adbcbf583beb2eebb2491eecc209e9b1901d6759c4fa592b15441b897426a319c7acbf5a318d56df08007e3ab42ff1eef21dfa225cb13b1fd09f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720326474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a","84a60081825820a6ce62b2ddff951159cd0a57b4dcbc85e9f788a1df146bd6942eed4587d6a73b02018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001fe1c616a021a00033ff1075820092fdddc646d863321ab6d059632a1f09431b7057898f500148e8225f0cae1f80e82581cded983764fdb27ff993ce0257e64e20cba99348ad3721a59e8c62819581c54c6914ec2a61707bcd1a1a958a6d0dfcbe54f013915c4bb1412be420f00a10083825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a5827055840b3b45c16631ec2dbb9a08add0a2e6807eb625202580cd84210e7a720794efcba168f48f45e67e447b2100da72db840d0eb745488c79fb77a5b55784f61c7620182582060d0f59f4d016b13260397822157334c0b591b8787018e837e6393985ee894a7584037237f50b97f2676405032efa710b7510c322265f288f3208516cfa572f2f073cd0df69a65421bcf3b15202f6ee3cb96ed20601479c8f3e30a16f8d26fadee0382582058808596d82738aa09b3bd7c61321f9e63eb91a63e2d7f0637060627508c4e3c5840c379553eff19eb4ccc04499dbba984a7cbbe69c1a8668094ae71e466853b7dd2206e790710b46ef3de9bcf528fbf84e0370cb8e135ddc5eb42a30c9b46f3fc02f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720336474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a"]}],"properties":{"type":{"type":"string","const":"submitTxs"},"txs":{"title":"Signed Transaction CBOR (Hex) List","description":"List or Key-Value Map of Signed Transaction CBOR (Hex)","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"type":"string","title":"Pattern of transaction name in wallet local storage. If missing, no custom name will be set or updated","examples":["NFTDropTx_${key}_${date}","Pay 5 ADA to Charles"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide. Pattern can contain this placeholder variables: `index`,`key`,`date`,`txHash` "},"extras":{"title":"Return extra data","description":"When set to `true` it will return more information, not just the list of the hexadecimal encoded submitted transactions CBOR","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"mode":{"title":"Operation mode","description":"Storage, submit and confirmation awaiting modes","default":"parallel","type":"string","oneOf":[{"type":"string","const":"later","title":"Store Only Mode","description":"It will only store the transaction on wallet local storage without submitting. Will require a manual submit later."},{"type":"string","const":"noWait","title":"Submit all at once and continue","description":"It will submit all the transactions on list at the same time and continue the script execution without waiting their network confirmations"},{"type":"string","const":"parallel","title":"Submit all at once and wait","description":"It will submit all the transactions on list at the same time and pause the script execution until everyone gets confirmed by the network"},{"type":"string","const":"sequential","title":"Submit and wait, one by one","description":"It will treat the list as a queue, submitting and awaiting for every transaction to get confirmed by the network, one by one, in list order."}]}},"required":["type","txs"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":true},"permissions":{"type":"array","const":["submitTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"signTxs.json":{"$id":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n","examples":[{"type":"signTxs","detailedPermissions":false,"txs":["84a5008182582035fa8e800c024ccd5bb6167560d5cb35d0e30a85fcbd48ddae041189fb61d27f01018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a000f424082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b0000000205b0cbce021a0002a40d0758200fdae76f2b6548313002f0dfef731e8059211c2c1fcbff1a8536c4c44b0d813d0f00a10080f5a11849a3687265666572726572782f68747470733a2f2f626574612d70726570726f642d77616c6c65742e67616d656368616e6765722e66696e616e63656474797065627478617663312e30"]},{"type":"signTxs","namePattern":"Signed from on-the-fly generated CBOR","detailedPermissions":false,"txs":["{get('cache.stage1_build_transaction.txHex')}"]},{"sign":{"type":"signTxs","namePattern":"Multisig Transaction #{key}","detailedPermissions":false,"multisig":[{"kind":"MainAddress"},{"kind":"CurrentWorkspace"},{"kind":"Roundtable","share":true},{"kind":"Unimatrix","share":true,"id":"multisig_1234"}],"txs":["84a600818258203f7439fc7123a0bb6628aa4e94163233c01c905b26c02566a3ee2793e57b01dc01018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001ff8ca89e021a0003296d075820b1e936fe521b1a830676e10e6f5c74d5d49011a80a047feebcf3b442442071a30e81581cded983764fdb27ff993ce0257e64e20cba99348ad3721a59e8c628190f00a10081825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a58270558403539d882acd6c425221f0abe14fe19d8f1b77227245004e6749599ffd26bdd24da39e59e56553e9b7d655426d608bbe89fd9f5d262f87866aef55fb90c4c9708f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720316474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a","84a60081825820426924164b1c07dbda582cc4d88c6182630c6a85896ad5be742fefe1def0865803018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001ff2ed3e3021a0003296d075820db1442613240f575570d542be5e9141f34d79482f07e1535d0ac883868d6a6440e81581c54c6914ec2a61707bcd1a1a958a6d0dfcbe54f013915c4bb1412be420f00a10082825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a5827055840364eaac515830fe353d3505559e024c3263f82a08c3ece22012a1333561df6e8694cafddef8b9ae55d3160fad292d96a224696d13da3bebe92cd9785a481c30c82582058808596d82738aa09b3bd7c61321f9e63eb91a63e2d7f0637060627508c4e3c5840f2b0809a193e5adbcbf583beb2eebb2491eecc209e9b1901d6759c4fa592b15441b897426a319c7acbf5a318d56df08007e3ab42ff1eef21dfa225cb13b1fd09f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720326474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a","84a60081825820a6ce62b2ddff951159cd0a57b4dcbc85e9f788a1df146bd6942eed4587d6a73b02018282583900feff70b08356d72c571ade218c7e2933235d2cdc37259646013a27d961d11bcf82ebd0ca2afdaf96e11ec71e43ab4e454cbe1495b42a4e861a001e848082583900d8ad931196680f24c99f65244aa099277684ea1c09f9c95fd9c9d72ef3eb9839fb3be3e66b330bc9d3213d498c3d61a1fe4b33699f04dce51b00000001fe1c616a021a00033ff1075820092fdddc646d863321ab6d059632a1f09431b7057898f500148e8225f0cae1f80e82581cded983764fdb27ff993ce0257e64e20cba99348ad3721a59e8c62819581c54c6914ec2a61707bcd1a1a958a6d0dfcbe54f013915c4bb1412be420f00a10083825820b495c77a7e6695ee6ad44c330f590ca20e9d740a185a93f1128c4e578a5827055840b3b45c16631ec2dbb9a08add0a2e6807eb625202580cd84210e7a720794efcba168f48f45e67e447b2100da72db840d0eb745488c79fb77a5b55784f61c7620182582060d0f59f4d016b13260397822157334c0b591b8787018e837e6393985ee894a7584037237f50b97f2676405032efa710b7510c322265f288f3208516cfa572f2f073cd0df69a65421bcf3b15202f6ee3cb96ed20601479c8f3e30a16f8d26fadee0382582058808596d82738aa09b3bd7c61321f9e63eb91a63e2d7f0637060627508c4e3c5840c379553eff19eb4ccc04499dbba984a7cbbe69c1a8668094ae71e466853b7dd2206e790710b46ef3de9bcf528fbf84e0370cb8e135ddc5eb42a30c9b46f3fc02f5a21849a5687265666572726572606972657475726e55524c783368747470733a2f2f756e696d61747269782d64656d6f2e6e65746c6966792e6170702f3f7478486173683d7b7478486173687d657469746c6574556e696d6174726978204d756c746973696720336474797065627478617663312e301902a2a1636d73678978400a0a436f6e736964657220766f74696e672046756e643131206f70656e20736f757263652070726f6a656374733a0a0a2d2047616d654368616e6765723a206f784070656e2d736f757263696e67206e6f7720746f2068656c70204349503330207370656320757067726164650a68747470733a2f2f63617264616e6f2e6964656178407363616c652e636f6d2f632f696465612f3131323436380a0a2d2047616d654368616e6765723a206f70656e2d736f757263696e6720556e696d6174726978207840746f2064656d6f63726174697a65206d756c74697369670a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f31313278403437302f0a0a2d20416e64616d696f202d2047616d656368616e6765722048656c696f73206441505020616e64206170706c69636174696f6e206261636b656e78406420636f757273650a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323231350a0a2d2043617264616e6f207840546f74656d2056323a204f6e626f617264696e672074686520776f726c640a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f6978406465612f3131323037310a0a2d2044616e64656c696f6e20506f737467524553542047554920666f7220646576656c6f7065727320616e642073747564656e747840730a68747470733a2f2f63617264616e6f2e696465617363616c652e636f6d2f632f696465612f3131323437330a0a486170707920486f6c6964617973210a0a"]}}],"properties":{"type":{"type":"string","const":"signTxs"},"txs":{"title":"Unsigned Transaction CBOR (Hex) List","description":"List or Key-Value Map of Unsigned Transaction CBOR (Hex)","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"namePattern":{"type":"string","title":"Pattern of transaction name in wallet local storage. If missing, no custom name will be set or updated","examples":["NFTDropTx_${key}_${date}","Pay 5 ADA to Charles"],"description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide. Pattern can contain this placeholder variables: `index`,`key`,`date`,`txHash`. Signed transactions are stored in stand by mode on local storage as a good practice to always let the user have a copy of what has been signed."},"multisig":{"title":"Multi-Signature Providers","description":"List or Key-Value Map of Multi-Signature Providers","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/MultiSigProvider","type":"object","title":"Multi-Signature Provider","description":"Multi-Signature methods to obtain all or some missing verification key signatures for one or more transactions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/MultiSigProvider","type":"object","title":"Multi-Signature Provider","description":"Multi-Signature methods to obtain all or some missing verification key signatures for one or more transactions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/MultiSigProvider","type":"object","title":"Multi-Signature Provider","description":"Multi-Signature methods to obtain all or some missing verification key signatures for one or more transactions"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"detailedPermissions":{"title":"Set detailed permissions","description":"When `false` it disables the consumption of detailed sub permissions based on transaction features. This is insecure but useful in cases where is impossible to know in advance what permissions are going to be required.","type":"boolean","default":true},"extras":{"title":"Return extra data","description":"When set to `true` it will return more information, not just the list of the hexadecimal encoded signed transactions CBOR","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"extraPermissions":{"title":"Extra permission declaration for expected runtime behavior","description":"Some operations can require on runtime extra permissions when it arguments are dynamically generated, for example when using inline GCScript macros. If there is a difference between the amount of permissions calculated on preprocessor stage and the actual permissions being requested on runtime, script execution will stop with a critical error. If you are using inline macros and plan to require extra permissions on runtime, declare them here.","type":"object","minProperties":1,"properties":{"signTx":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:input":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:input:script":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:input:externally":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:collateral":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:collateral:script":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:spend:collateral:externally":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:reference:input":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:send:script":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:send:externally":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:send:plutusData":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:send:nativeScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:send:plutusScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:sendCollateralReturn:script":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:sendCollateralReturn:externally":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:sendCollateralReturn:plutusData":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:sendCollateralReturn:nativeScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:sendCollateralReturn:plutusScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:reward":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:reward:script":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:reward:externally":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:mint":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:burn":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:stakeRegistration":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:stakeDeregistration":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:stakeDelegation":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:poolRegistration":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:poolRetirement":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:genesisKeyDelegation":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:cert:moveInstantaneousRewardsCert":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:update":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:requiredSigners":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:nativeScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:plutusScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:plutusData":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:redeemer:spend":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:redeemer:mint":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:redeemer:cert":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:redeemer:data":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:auxiliaryData:metadata":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:auxiliaryData:nativeScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1},"signTx:auxiliaryData:plutusScript":{"title":"Times","description":"Extra times this permission will be consumed on runtime","type":"number","minimum":1}},"additionalProperties":false}},"required":["type","txs"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":true},"customRuntimePermissionDetection":{"type":"boolean","const":true},"permissions":{"type":"array","const":["signTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"buildTx.json":{"$id":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n","examples":[{"type":"buildTx","title":"🚀 1 ADA payment","description":"This is a payment of 1 ADA on mainnet.","tx":{"outputs":[{"address":"addr1q98f06pcrsn8x03uw0vlejw684fcu02waffvfscdsz0djgqd6j6v0fc04n5ehg292yxvs292vesrqqmxqfnp7yuwn7yq2vsyn7","assets":[{"policyId":"ada","assetName":"ada","quantity":"1000000"}]}]}},{"type":"buildTx","title":"🚀 1 tADA payment","description":"This is a payment of 1 tADA on pre-production testnet.","tx":{"outputs":[{"address":"addr_test1qzfd9plgasmmt0fns8lt2m0ckrx6cpuj6tm8f6332gjjjhh8vcafzqj5tsw0n93pla5kcmyx9q73avpspxht2n6fldus2xqcsq","assets":[{"policyId":"ada","assetName":"ada","quantity":"1000000"}]}]}},{"type":"buildTx","title":"An NFT Mint and drop transaction","tx":{"ttl":{"until":"{get('cache.dependencies.deadlineSlotNumber')}"},"mints":[{"policyId":"{get('cache.dependencies.mintingPolicy.scriptHashHex')}","assets":[{"assetName":"{get('cache.dependencies.assetName')}","quantity":"{get('cache.dependencies.quantity')}"}]}],"outputs":{"exampleDrop01":{"address":"addr1q98f06pcrsn8x03uw0vlejw684fcu02waffvfscdsz0djgqd6j6v0fc04n5ehg292yxvs292vesrqqmxqfnp7yuwn7yq2vsyn7","assets":[{"policyId":"{get('cache.dependencies.mintingPolicy.scriptHashHex')}","assetName":"{get('cache.dependencies.assetName')}","quantity":"1"}]}},"witnesses":{"nativeScripts":{"mintingScript":"{get('cache.dependencies.mintingPolicy.scriptHex')}"}},"auxiliaryData":{"721":{"{get('cache.dependencies.mintingPolicy.scriptHashHex')}":{"{get('cache.dependencies.assetName')}":{"url":"https://gamechanger.finance","name":"{get('cache.dependencies.assetName')}","description":"{replaceAll('Only __QUANTITY__ NFTs were minted','__QUANTITY__',get('cache.dependencies.quantity'))}","author":"GameChanger Wallet","image":"ipfs://QmVWGxAKpB2Sxy3ZnfZsdt3gxocFEUUe8GPBcraLTZSQKT","version":"1.0","mediaType":"image/png","files":[{"mediaType":"image/png","src":"ipfs://QmVWGxAKpB2Sxy3ZnfZsdt3gxocFEUUe8GPBcraLTZSQKT","arweaveId":"jn5d55VbVdpvA3y9WAlzRRBP1zhkq8l3QiUR-vVHb-0","sha256":"5b8ee29640bf24074a3988bb6b852165731fe8612793ef5a74433f1689e2cb4b"}]}}}}}},{"type":"buildTx","title":"Spending a previously smart-contract-locked UTXO","parentTxHash":"{get('cache.buildLock.txHash')}","tx":{"inputs":[{"txHash":"{get('cache.buildLock.txHash')}","index":0,"idPattern":"locked-input"}],"referenceInputs":[{"txHash":"b7bf85bbd734c9159e6f44cceac29725cb779087f7707bd6fd3d5e7725b5c9d0","index":0}],"witnesses":{"plutus":{"scripts":[{"scriptHashHex":"{get('cache.dependencies.contract.scriptHashHex')}","lang":"{get('cache.dependencies.contract.lang')}","input":{"txHash":"b7bf85bbd734c9159e6f44cceac29725cb779087f7707bd6fd3d5e7725b5c9d0","index":0}}],"consumers":[{"scriptHashHex":"{get('cache.dependencies.contract.scriptHashHex')}","datum":{"dataHex":"{get('cache.dependencies.lock.datumHex')}"},"redeemer":{"type":"spend","itemIdPattern":"locked-input"}}]}},"options":{"collateralCoinSelection":"LASLAD"}}}],"properties":{"type":{"type":"string","const":"buildTx"},"title":{"description":"On-chain title of the transaction","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["NFT Minting Request","Pay 5 ADA to Charles"]},"description":{"description":"On-chain description of the transaction","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["By running this transaction you will be minting your NFT","Hey Alice, this is Charles charging you for that pineapple pizza we had yesterday!"]},"id":{"description":"On-chain custom unique identifier of the transaction","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["1679175913-342-323","e30d4b03fff054252310656fba33af29f5c29d","bob's payment #4","2023-03-18T21:45:13Z"]},"tags":{"title":"List of Tags","description":"List or Key-Value Map of Tags, on-chain custom list of strings or keywords to identify transactions by categories","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"indexOf":{"description":"On-chain custom index of the transaction within it's group","anyOf":[{"type":"number"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"group":{"description":"On-chain custom group name where this transaction belongs","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["GCFS Disk Update","Multisig Broadcast","NFT Drop"]},"parentTxHash":{"description":"On-chain custom transaction hash of a transaction considered parent of this one, or that this one is a reply to it","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["6d91ddb6fb8c01d932258b7d24d06a2b14aa4d88325e6819c0743bf34c602355"]},"onSuccessURL":{"description":"[Deprecated]. Please use `returnURLPattern` instead. On-chain custom on success redirection relative URL with transaction hash included as URL variable","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["/cart/success"]},"onPendingURL":{"description":"[Deprecated]. Please use `returnURLPattern` instead. On-chain custom on pending redirection relative URL with transaction hash included as URL variable","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["/cart/pending"]},"onRejectURL":{"description":"[Deprecated]. Please use `returnURLPattern` instead. On-chain custom on rejection redirection relative URL with transaction hash included as URL variable","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["/cart/reject"]},"returnURLPattern":{"description":"On-chain custom redirection absolute URL template with transaction hash and/or other possible variables wrapped between `{` and `}`. Available templating variables are `txHash`","anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}],"examples":["https://yourCustomDappSite.com/transaction/{txHash}/view","https://yourOtherCustomDappSite.com/cart.php?txHash={txHash}"]},"config":{"type":"object","properties":{"noLock":{"description":"On-chain boolean value that when true will instruct GameChanger compatible wallets that load this transaction into local storage to avoid reserving UTXOs as inputs for it","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"agree":{"description":"On-chain boolean value that when true will instruct GameChanger compatible wallets to require an extra confirmation to the user prior submitting this transaction","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}}},"name":{"type":"string","title":"Name of this transaction in wallet local storage","description":"Wallet stores locally specific objects for later reuse. This is the name property of this record. Names can collide.","examples":["Half signed transaction #4","Pay 5 ADA to Charles"]},"tx":{"title":"Transaction","description":"A Cardano transaction definition, with fields like inputs,outputs,mints,certificates,smart contracts and metadata","anyOf":[{"$ref":"common.json#/definitions/Tx","type":"object","title":"Transaction","description":"A Cardano transaction definition, with fields like inputs,outputs,mints,certificates,smart contracts and metadata"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"extras":{"title":"Return extra data","description":"When set to `true` it will return more information, not just the hexadecimal CBOR of the built transaction","anyOf":[{"type":"boolean"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","tx"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["buildTx"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"walletGenerator.json":{"$id":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n","examples":[{"type":"walletGenerator","amount":1000,"defaultNamePattern":"Attendee {index}","defaultDescriptionPattern":"Wallet for Attendee #{index}","defaultKeyPattern":"{index}","defaultHintPattern":"Your password is '{password}'","qr":true,"download":true}],"properties":{"type":{"type":"string","const":"walletGenerator"},"amount":{"title":"Number of wallets","description":"Number of wallets to be generated. When using this property, all the 'default' properties will be in use to generate individual wallet data like name, description, password, etc... (Currently using this property is the only usage mode available to call this API)","anyOf":[{"type":"number","minimum":1},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultKeyPattern":{"title":"Default Key Pattern","description":"This API returns a JSON object with each wallet data contained under corresponding object key. With this property you can customize these keys. Available templating variables are `index`, `key`","default":"{index}","examples":["result_{index}","Student{index}","attendee-{key}"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultNamePattern":{"title":"Default Name Pattern","description":"Name of the wallet. not encrypted data on wallet file. You can use variables wrapped between `{` and `}` to automate individual item property generation. Available templating variables are `index`, `key`","examples":["Student {index}","attendee-{key}"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultDescriptionPattern":{"title":"Default Description Pattern","description":"Description of the wallet. Not encrypted data on wallet file. You can use variables wrapped between `{` and `}` to automate individual item property generation. Available templating variables are `index`, `key`","examples":["Hi Student {index}. Scan this QR to import you wallet","Wallet created for Attendee #{key}","Welcome to Cardano!"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultHintPattern":{"title":"Default Hint Pattern","description":"Password hint of the wallet, instructions, references for the end user to figure out the password, on low risk use cases password can be exposed here. Not encrypted data on wallet file. You can use variables wrapped between `{` and `}` to automate individual item property generation. Available templating variables are `index`, `key`, `password`. Be careful when using `password` variable because this will expose password in plain text","examples":["Ask John the password for Student {index} wallet","you password is 'imAttendee{key}'","Password1234"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"defaultPasswordPattern":{"title":"Default Password Pattern","description":"Password used to encrypt the wallet file with. If missing, a password generator will be used, use with caution as if not using `secrets=true` and not including `password` templating variable on hint you won't have access to the used password. You can use variables wrapped between `{` and `}` to automate individual item property generation. Available templating variables are `index`, `key`","examples":["P455w0rd{index}","imAttendee{key}","Password1234"],"anyOf":[{"type":"string"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"qr":{"title":"Generate QR Codes","description":"Will generate wallet and address scannable QR codes. When `secrets=true` this image files will be returned as base64 data URI PNG files. When `download=true` this images will be downloaded, ready to be printed or showed on screens to became scanned/imported on any GameChanger Wallet","anyOf":[{"type":"boolean","default":true},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"download":{"title":"Download QR Codes","description":"When using `qr=true` mode, wallet and address QR codes will be downloaded as PNG files. Filenames will be generated using wallet names.","anyOf":[{"type":"boolean","default":true},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"printable":{"title":"Use black and white QR Codes","description":"When using `qr=true` mode, wallet and address QR codes will be rendered in black and white, prepared for printing","anyOf":[{"type":"boolean","default":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"legacy":{"title":"Generate V1 Gift Wallet Addresses","description":"When using `legacy=true` mode, returned and downloaded QR encoded addresses will be compatible with legacy GameChanger V1 Gift Wallets, while the wallet encrypted files and wallet encrypted QR codes will remain importable on V1 and V2.","anyOf":[{"type":"boolean","default":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"extra":{"title":"Return extra wallet information","description":"When true, it returns extra wallet information such as main spend and stake public keys (bip32 paths: 'm/1852h/1815h/0h/0/0' and 'm/1852h/1815h/0h/2/0'), their key hashes, and the default credentials used on wallet address. This public data can be used later for example to design native scripts without requiring to import the generated wallets or providing their private keys to do so","anyOf":[{"type":"boolean","default":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"secrets":{"title":"Return wallet secrets","description":"Only when running with system privileges, it returns wallet secrets such as password, seed phrase mnemonics and root private key. Use with caution!","anyOf":[{"type":"boolean","default":false},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"required":["type","amount"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":0},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["createWallet"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":false}}}},"additionalProperties":false},"macro.json":{"$id":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n","examples":[{"type":"macro","run":"{get('cache.address')}"},{"type":"macro","run":{"address":"{console('log','my address is',get('cache.address')); return(get('cache.address'))}","uuid":"{uuid()}","hash":"{sha256(get('cache.address'))}"}},{"type":"macro","run":{"nftMetadata":{"721":{"{get('cache.dependencies.mintingPolicy.scriptHashHex')}":{"{get('cache.dependencies.assetName')}":{"name":"{get('cache.dependencies.assetName')}","author":"GC Wallet","image":"{strToMetadataStr(get('global.image'))}","mediaType":"image/svg+xml"}}}}}}],"properties":{"type":{"type":"string","const":"macro"},"run":{"anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Value","description":"A value of any JSON-supported type. It can contain Inline Scripting nested inside at any level."}]}},"required":["type","run"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["executeScript"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"importAsScript.json":{"$id":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow","examples":[{"type":"importAsScript","from":["gcfs://88e0e51d4522c8d9c10e061dca6eb928c1df2a5d10efdcae9059bc85.test@latest://src/script.gcscript"]},{"type":"importAsScript","decryptWith":{"kind":"system"},"from":["gcfs://1170d12887c70593e40938a5ff1832f9eb2b8e4a328a982621b36a57.gc_settings@latest://scripts/config.gcscript.sys"]}],"properties":{"type":{"type":"string","const":"importAsScript"},"exportAs":{"type":"string","title":"Export results under a property with this name","description":"When set, it allows you return all the results of this script back to the DAPP under a property with this string as name"},"title":{"description":"Title of the container script","type":"string","examples":["NFT Minting Request","Pay 5 ADA to Charles"]},"description":{"description":"Description of the container script","type":"string"},"args":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"argsByKey":{"title":"Script Argument List","description":"List or Key-Value Map of Script Argument List. Each child script will have read access to it's corresponding arguments referenced by with same key. Use inline macro on `args` parameter like this inside each imported script `\"args\":\"{get('args')}\"`. Script `args` parameter will act as default arguments if key is not present on the list ","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"from":{"title":"Import external files","description":"List of external JSON files to inline into the script","anyOf":[{"title":"Array","type":"array","minItems":1,"items":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},"additionalProperties":false}]},"decryptWith":{"$ref":"common.json#/definitions/PreprocessorPasswordProvider","type":"object","title":"Pre-Processor Password Provider","description":"Password provider methods only for pre-processor stage functions"}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":true},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["executeExternalScript","executeScript"]},"runtime":{"type":"boolean","const":false},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"importAsData.json":{"$id":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow","examples":[{"type":"importAsData","from":{"A":"gcfs://1170d12887c70593e40938a5ff1832f9eb2b8e4a328a982621b36a57.gc.disk@latest://foo/bar/baz/readme.txt","B":"gcfs://1170d12887c70593e40938a5ff1832f9eb2b8e4a328a982621b36a57.gc.disk@latest://data/encryptedData.crypt","C":"0xf09f9a802048656c6c6f20576f726c64206f6620496e6c696e65642048657861646563696d616c204461746120617320616e2055524921"}}],"properties":{"type":{"type":"string","const":"importAsData"},"from":{"title":"Import external files","description":"List of external JSON files to inline into the script","anyOf":[{"title":"Array","type":"array","minItems":1,"items":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"type":"string","title":"Remote JSON file URI","description":"URI of an GCFS (`gcfs://...`) or hexadecimal (`0x...`) JSON resource to inline into the script"}},"additionalProperties":false}]}},"required":["type"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":true},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["useExternalData","useConstantData"]},"runtime":{"type":"boolean","const":false},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"script.json":{"$id":"script.json","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute","type":"object","examples":[{"type":"script","title":"Using arguments","description":"Let's use dapp connector internal console to log or debug some events. Run and go to Advanced - Console to read them.","args":{"logMsg":"This is a log message","infoMsg":"This is an info message","warnMsg":"This is a warning message","errorMsg":"This is an error message"},"run":{"allTheMessages":{"type":"macro","run":["{console('log',    get('args.logMsg'))}","{console('info',   get('args.infoMsg'))}","{console('warn',   get('args.warnMsg'))}","{console('error',  get('args.errorMsg'))}"]}}},{"type":"script","title":"Using arguments by key","description":"Let's use dapp connector internal console to log or debug some events. Run and go to Advanced - Console to read them.","argsByKey":{"logMsg":"This is a log message","infoMsg":"This is an info message","warnMsg":"This is a warning message","errorMsg":"This is an error message"},"run":{"logMsg":{"type":"macro","run":"{console('log',    get('args'))}"},"infoMsg":{"type":"macro","run":"{console('info',   get('args'))}"},"warnMsg":{"type":"macro","run":"{console('warn',   get('args'))}"},"errorMsg":{"type":"macro","run":"{console('error',  get('args'))}"}}},{"type":"script","title":"Using isolate cache","description":"Let's use isolate cache to shield a script to restrict it's access to parent scope. Useful for creating reusable functions or importable libraries.","run":{"data":{"type":"data","value":"Hey you can access parent data!"},"withoutIsolatedCache":{"type":"script","run":{"data":{"type":"data","value":"Hey you can access non-isolated-child data!"},"nonIsolatedChildAccessAttempt":{"type":"macro","run":["{console('info', get('cache.data'))}","//WILL FAIL, IT DOES NOT EXIST YET: {console('info', get('cache.withIsolatedCache.data'))}","{console('info', get('cache.withoutIsolatedCache.data'))}"]}}},"withIsolatedCache":{"type":"script","isolateCache":true,"run":{"data":{"type":"data","value":"Hey you can access isolated-child data!"},"isolatedChildAccessAttempt":{"type":"macro","run":["{console('info', get('cache.data'))}","//WILL FAIL, CACHE IS ISOLATED FROM PARENT SCOPE: {console('info', get('cache.withIsolatedCache.data'))}","//WILL FAIL, CACHE IS ISOLATED FROM PARENT SCOPE: {console('info', get('cache.withoutIsolatedCache.data'))}"]}}},"parentAccessAttempt":{"type":"macro","run":["{console('info', get('cache.data'))}","{console('info', get('cache.withIsolatedCache.data'))}","{console('info', get('cache.withoutIsolatedCache.data'))}"]}}}],"properties":{"type":{"type":"string","const":"script"},"args":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"argsByKey":{"title":"Script Argument List","description":"List or Key-Value Map of Script Argument List. Each child script will have read access to it's corresponding arguments referenced by with same key. Use inline macro on `args` parameter like this inside each imported script `\"args\":\"{get('args')}\"`. Script `args` parameter will act as default arguments if key is not present on the list ","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"return":{"$ref":"common.json#/definitions/ScriptReturnModes","type":"object","title":"Script Return Modes","description":"Modes in which a script( a block of code), will return it results","default":{"mode":"all"}},"exportAs":{"type":"string","title":"Export results under a property with this name","description":"When set, it allows you return all the results of this script back to the DAPP under a property with this string as name"},"isolateCache":{"title":"Isolate cache","description":"If true, this block of code isolates it's cache scope as if it where the only one existing on context, making the rest of the code outside of it unreachable from within. Useful to keep variable paths absolute (for `get()` macro function for ex.), no matter if the block is the root block of an entire script of it is nested inside others.","type":"boolean","default":false},"title":{"description":"Title of the script","type":"string","examples":["NFT Minting Request","Pay 5 ADA to Charles"]},"description":{"description":"Description of the script","type":"string"},"run":{"title":"Blocks of code","description":"List of API functions or nested Blocks of Code to execute","anyOf":[{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},"additionalProperties":false}]}},"required":["run"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["executeScript"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"api.json":{"$id":"api.json","title":"Initial block of code","description":"\nWhen you code on GCScript, you always start by calling this function first. This is the initial block of code containing a sequence of GCScript functions or other sub-nested blocks of code.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation pages for syntax guide and more.\n\n","type":"object","examples":[{"type":"script","title":"Your wallet information","description":"Do you want to share wallet information back to the dapp?","exportAs":"myExports","returnURLPattern":"https://yourCustomDappSite.com/dappCallExecutionResults/{result}/view","run":{"name":{"type":"getName"},"address":{"type":"getCurrentAddress"},"message":{"type":"data","value":"Hello Cardano!"}}},{"type":"script","title":"🚀 Pay me 1 ADA","description":"This is a payment request of 1 ADA","returnURLPattern":"https://justAnotherDapp.io/","exportAs":"txHash","return":{"mode":"last"},"run":{"stage1_build_transaction":{"type":"buildTx","title":"🚀 You paid me 1 ADA","description":"This was a payment request of 1 ADA","tx":{"outputs":[{"address":"addr1q98f06pcrsn8x03uw0vlejw684fcu02waffvfscdsz0djgqd6j6v0fc04n5ehg292yxvs292vesrqqmxqfnp7yuwn7yq2vsyn7","assets":[{"policyId":"ada","assetName":"ada","quantity":"1000000"}]}]}},"stage2_sign_transaction":{"type":"signTxs","detailedPermissions":false,"txs":["{get('cache.stage1_build_transaction.txHex')}"]},"stage3_submit_transaction":{"type":"submitTxs","txs":"{get('cache.stage2_sign_transaction')}"},"stage4_export_results":{"type":"macro","run":"{get('cache.stage1_build_transaction.txHash')}"}}},{"type":"script","title":"My first workspace","description":"Lets create a workspace to store your custom key derivations","run":{"myWorkspace":{"type":"loadConfig","updateId":"demo","layers":[{"type":"Workspace","items":[{"namePattern":"derivations","titlePattern":"Derivations","descriptionPattern":"My custom wallet settings"}]},{"type":"Key","workspaceIds":["derivations"],"namePattern":"myKey_{index}_{key}_{kind}_{accountIndex}_{addressIndex}","items":[{"pathPattern":"m/1852h/1815h/0h/2/{index}"},{"pathPattern":"m/1852h/1815h/1h/1/{index}"},{"pathPattern":"m/1852h/1815h/2h/0/{index}"}]}]}}}],"properties":{"type":{"type":"string","const":"script"},"args":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]},"argsByKey":{"title":"Script Argument List","description":"List or Key-Value Map of Script Argument List. Each child script will have read access to it's corresponding arguments referenced by with same key. Use inline macro on `args` parameter like this inside each imported script `\"args\":\"{get('args')}\"`. Script `args` parameter will act as default arguments if key is not present on the list ","anyOf":[{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"},{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"common.json#/definitions/ScriptArguments","title":"Script arguments","description":"Pass any kind of data as arguments to this script. During runtime, script code will be able to access it using inline macro getter this way `{get('args.foo.bar')}`"},{"$ref":"lang.json","type":"string","title":"Inline Scripting Language (ISL)","description":"\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n"}]}},"additionalProperties":false}]},"return":{"$ref":"common.json#/definitions/ScriptReturnModes","type":"object","title":"Script Return Modes","description":"Modes in which a script( a block of code), will return it results","default":{"mode":"all"}},"exportAs":{"type":"string","title":"Export results under a property with this name","description":"When set, it allows you return all the results of this script back to the DAPP under a property with this string as name"},"isolateCache":{"title":"Isolate cache","description":"If true, this block of code isolates it's cache scope as if it where the only one existing on context, making the rest of the code outside of it unreachable from within. Useful to keep variable paths absolute (for `get()` macro function for ex.), no matter if the block is the root block of an entire script of it is nested inside others.","type":"boolean","default":false},"title":{"description":"Title of the script","type":"string","examples":["NFT Minting Request","Pay 5 ADA to Charles"]},"description":{"description":"Description of the script","type":"string"},"run":{"title":"Blocks of code","description":"List of API functions or nested Blocks of Code to execute","anyOf":[{"title":"Array","type":"array","minItems":1,"items":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},{"title":"Numerical key map","type":"object","propertyNames":{"pattern":"^[0-9]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},"additionalProperties":false},{"title":"Alphanumerical key map","type":"object","propertyNames":{"pattern":"^[A-Za-z0-9_]*$"},"minProperties":1,"patternProperties":{"":{"anyOf":[{"$ref":"await.json","type":"object","title":"Await condition","description":"Stops the execution of the script until a condition is met"},{"$ref":"getPublicKeys.json","type":"object","title":"Get Public Keys","description":"Get Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map"},{"$ref":"getAddresses.json","type":"object","title":"Get Addresses","description":"Get Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map."},{"$ref":"setCurrentWorkspace.json","type":"object","title":"Set Current Workspace","description":"\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"loadConfig.json","type":"object","title":"Load Wallet Configuration","description":"\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n"},{"$ref":"saveConfig.json","type":"object","title":"Save Wallet Configuration","description":"\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n"},{"$ref":"enableTerminalMode.json","type":"object","title":"Enable Terminal Mode","description":"Adapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone."},{"$ref":"data.json","type":"object","title":"Data constant","description":"Allows you to define an arbitrary data constant. Any valid JSON type can be used."},{"$ref":"getCurrentAddress.json","type":"object","title":"Get Current Address","description":"Ask for the current wallet address being used"},{"$ref":"getCurrentIdentity.json","type":"object","title":"Get Current Address Identity","description":"Ask for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getMainAddress.json","type":"object","title":"Get Main Address","description":"Ask for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet"},{"$ref":"getMainIdentity.json","type":"object","title":"Get Main Address Identity","description":"Ask for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity"},{"$ref":"getName.json","type":"object","title":"Get Name","description":"Ask for a user's wallet current name"},{"$ref":"getCurrentSlot.json","type":"object","title":"Get Current Slot Number","description":"Fetch from a backend node the current network slot number (seconds)"},{"$ref":"getSpendingPublicKey.json","type":"object","title":"Get Spending Public Key","description":"Ask for current user's wallet spending public key"},{"$ref":"getStakingPublicKey.json","type":"object","title":"Get Staking Public Key","description":"Ask for current user's wallet staking public key"},{"$ref":"buildAddress.json","type":"object","title":"Build Address","description":"Build Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future."},{"$ref":"deriveKeys.json","type":"object","title":"Derive Keys","description":"Bulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names"},{"$ref":"buildTx.json","type":"object","title":"Transaction Builder","description":"\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"signTx.json","type":"object","title":"Transaction Signing","description":"[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys"},{"$ref":"signTxs.json","type":"object","title":"Sign Transactions","description":"\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"submitTx.json","type":"object","title":"Transaction Submit","description":"[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction"},{"$ref":"submitTxs.json","type":"object","title":"Submit Transactions","description":"\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n"},{"$ref":"awaitTx.json","type":"object","title":"Await Transaction","description":"[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain."},{"$ref":"signDataWithAddress.json","type":"object","title":"Data Signing with address (CIP-8)","description":"Sign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification."},{"$ref":"verifySignatureWithAddress.json","type":"object","title":"Verify Signature with address (CIP-8)","description":"Verify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification."},{"$ref":"encrypt.json","type":"object","title":"Encrypt message","description":"Encrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message."},{"$ref":"decrypt.json","type":"object","title":"Decrypt message","description":"Decrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message."},{"$ref":"searchFs.json","type":"object","title":"File System Search (GCFS)","description":"Find files across all existing file systems based on a list of search parameters. Result will be a list of file URIs."},{"$ref":"buildFsTxs.json","type":"object","title":"File System Builder (GCFS)","description":"Build a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)"},{"$ref":"certificate.json","type":"object","title":"Certificate","description":"Build certificates"},{"$ref":"nativeScript.json","type":"object","title":"Native Script","description":"Build native scripts"},{"$ref":"plutusScript.json","type":"object","title":"Plutus Script","description":"Import or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n"},{"$ref":"plutusData.json","type":"object","title":"Plutus Data","description":"Build data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes"},{"$ref":"macro.json","type":"object","title":"Inline Macro","description":"\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n"},{"$ref":"importAsScript.json","type":"object","title":"Import external files as scripts","description":"List of external script JSON files to load into the workflow"},{"$ref":"importAsData.json","type":"object","title":"Import external files as data","description":"List of external data JSON files to load into the workflow"},{"$ref":"walletGenerator.json","type":"object","title":"Wallet Generator","description":"              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n"},{"$ref":"script.json","type":"object","title":"Nested block of code","description":"Nested block of code with a sequence of API functions or other sub-nested blocks of code to execute"}]}},"additionalProperties":false}]},"returnURLPattern":{"type":"string","title":"Return URL pattern for exports","description":"If set, when transport is `url` or `qr` and after script execution, the user will be asked to get redirected to this URL with the possibility to add the compressed exported data inside.\n\nThis is a customizable absolute URL template that can carry exported data and/or other possible variables wrapped between `{` and `}`.\n\nAvailable templating variables are: `result`. If no matching template variables found, as fallback method it will add a URL variable `/?result=<DATA>` to the URL provided.\n\n`result` will be encoded using `encoding` property.","examples":["pattern: https://yourCustomDappSite.com/dappCallExecutionResults/{result}/view","result: https://yourCustomDappSite.com/dappCallExecutionResults/1-XQAAAAJFAAAAAAAAAABAqcing63KhjHLnWgpoOSzN_IpQhccSLM949F1TPs7pjUI-mF-PVaLJNIGF8Dnja5jMhEqww4X0JSk5xzCpVZixagJs-yR__5rDAA/view","pattern: https://yourOtherCustomDappSite.com/action.php","result: https://yourOtherCustomDappSite.com/action.php?result=1-XQAAAAJFAAAAAAAAAABAqcing63KhjHLnWgpoOSzN_IpQhccSLM949F1TPs7pjUI-mF-PVaLJNIGF8Dnja5jMhEqww4X0JSk5xzCpVZixagJs-yR__5rDAA"]},"transport":{"type":"string","title":"Transport for exports","description":"Transport method to use to deliver execution results back to dapp or caller entity.\n\nIf not provided, will use same transport used to stablish the communication in first place","oneOf":[{"type":"string","const":"url","title":"URL","description":"Redirects the user to a URL that packs script exports inside to communicate back results to dapp. View `returnURLPattern` for URL customization."},{"type":"string","const":"qr","title":"QR URL","description":"Shows the user a QR encoded URL that packs script exports inside to communicate back results to dapp. View `returnURLPattern` for URL customization."}]},"encoding":{"type":"string","title":"Encoding/Compression for exports","description":"Transport encoding or compression for results being delivered back to dapp or caller entity.\n\nIf not provided, will use same encoding used to stablish the communication in first place","oneOf":[{"type":"string","const":"base64url","title":"URL-Safe Base64 encoding","description":"Encoding for `url` and `qr` transports (multi-platform support). For applications where non external dependencies are possible to achieve or wanted, native browser support, or for very resource-limited hardware support. Has no checksum. Base64 URL-safe encoding as in <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\" target=\"_blank\" rel=\"noopener noreferrer\"> RFC 4648-5 spec with padding </a> . "},{"type":"string","const":"json-url-lzma","title":"JSON-URL with LZMA compression","description":"Compression for `url` and `qr` transports (legacy support). For applications where nodejs/javascript dependencies are available. Has poor integrity check. Third party library <a href=\"https://github.com/masotime/json-url\" target=\"_blank\" rel=\"noopener noreferrer\"> json-url with LZMA compression </a> . "},{"type":"string","const":"gzip","title":"GZip Compression","description":"Compression for `url` and `qr` transports (recommended). For applications where non external dependencies are possible to achieve or wanted,  native browser support, widely available building blocks across all platforms. Has strong integrity checksum. Is GZip compression encoded in Base64 URL-safe encoding as in <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\" target=\"_blank\" rel=\"noopener noreferrer\"> RFC 4648-5 spec with padding </a> . "}]}},"required":["run"],"definitions":{"__api__":{"type":"object","properties":{"allowedRetries":{"type":"number","const":-1},"customPreprocessorPermissionDetection":{"type":"boolean","const":false},"customRuntimePermissionDetection":{"type":"boolean","const":false},"permissions":{"type":"array","const":["executeScript"]},"runtime":{"type":"boolean","const":true},"preprocessor":{"type":"boolean","const":true}}}},"additionalProperties":false},"index.json":{"$id":"index.json","type":"object","title":"GCScript API documentation","description":"\nGameChanger Wallet uses a domain specific language called GCScript DSL as it's dapp connector API. \nThis pure JSON code can be packed inside URLs and other transports to connect the wallet with dapps, hardware and other agents. \n\nThis is a list of references to all the schema files that conform the entire API of the GCScript DSL specification.\n\nFor <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> General Documentation </a> about\n\n-  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  syntax\n- How to build and sign  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> Transactions </a> \n- How to create accounts, multisigs, keys and addresses with <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> Workspaces </a>\n- <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/universal-dapp-connector/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> Universal Dapp Connector </a> documentation\n- ~75 <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/examples/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> simple dapp examples </a> to get you started\n\nand many other topics please go to  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet\" target=\"_blank\" rel=\"noopener noreferrer\"> GameChanger Wallet Official Github Repository </a> .\n    ","$comment":"This index schema file primary function is for documentation purposes and is not advisable to use it for code logic, only the file manifest on definitions could be used for development.","properties":{"Functions (40)":{"title":"Functions (40)","description":"These are all the Cardano and wallet-related functions that conform the GCScript API. Dapps or other agents combine them on scripts, that run wallet-side, and return the desired data results back to the calling agent or dapp.","type":"object","required":["[script]: Initial block of code"],"properties":{"[script]: Initial block of code":{"title":"Initial block of code","description":"\nGo to function's [documentation page](api.html)\n\n\nWhen you code on GCScript, you always start by calling this function first. This is the initial block of code containing a sequence of GCScript functions or other sub-nested blocks of code.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation pages for syntax guide and more.\n\n\n"},"[script]: Nested block of code":{"title":"Nested block of code","description":"\nGo to function's [documentation page](script.html)\n\nNested block of code with a sequence of API functions or other sub-nested blocks of code to execute\n"},"[importAsData]: Import external files as data":{"title":"Import external files as data","description":"\nGo to function's [documentation page](importAsData.html)\n\nList of external data JSON files to load into the workflow\n"},"[importAsScript]: Import external files as scripts":{"title":"Import external files as scripts","description":"\nGo to function's [documentation page](importAsScript.html)\n\nList of external script JSON files to load into the workflow\n"},"[macro]: Inline Macro":{"title":"Inline Macro","description":"\nGo to function's [documentation page](macro.html)\n\n\nJSON templates using Inline Scripting Language (ISL), useful for formatting, processing or debugging results.\n\nWill directly return the result of the execution of an ISL block of code if a ISL string value is provided or all the results of nested ISL strings values inside a JSON object or list. \n\nFunction inputs and outputs are isomorphic, only ISL code gets replaced by it's results, keeping the former input JSON structure.\n\nYou can also provide non ISL valid strings, and these will be treated as string constants instead.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> GCScript DSL </a> and  <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  for syntax guides and documentation.\n\n"},"[walletGenerator]: Wallet Generator":{"title":"Wallet Generator","description":"\nGo to function's [documentation page](walletGenerator.html)\n\n              \nGenerates multiple password encrypted wallet files to be imported by GameChanger Wallet. \n\nThese wallets will be flagged as ̣`burned`, ethical feature that is used on UI to tell end users that these wallets has been created by someone else with a proper suggestion about moving to a fully owned wallet type.\n\nIf these wallet files are encoded as a QR code ( `qr=true`), they became the famous Gift Wallets that GameChanger offers to onboard family, friends and users on events into Cardano.\n\nWhen running with system privileges and `secrets` is set to `true` this function returns also wallet secrets like password, wallet mnemonics and root private key.\n\nWallet addresses are returned in results, meaning you can use these addresses directly on the same script to airdrop funds to them.\n\nWallet files are currently network agnostic, meaning you can import these wallets on mainnet and testnets as well.\n\n"},"[buildTx]: Transaction Builder":{"title":"Transaction Builder","description":"\nGo to function's [documentation page](buildTx.html)\n\n\nBuilds an unsigned transaction that once signed and submitted will send funds, store arbitrary data on-chain, mint tokens and nfts, manage stake delegation and rewards, execute smart contracts, among all the amazing Cardano protocol features you can consume with it. \n\nYou can combine all these transactions capabilities on a single transaction as long as you don't hit the maximum transaction size value specified on protocol parameters.\n\nThis is a powerful and flexible transaction-building API. These are it's key features:\n - powered by Emurgo's Cardano Serialization Lib: is a practical wrapper of this library, but callable through JSON arguments\n - automatic/manual coin selection algorithms: a healthy UTXO set is one managed by wallets, not by dapps \n - automatic/manual change output optimizers algorithms: a healthy UTXO set is one early-planned by wallets, not late-fixed by dapps\n - smart minimum coin values per output: only focus in what you need to send, protocol complexities will be solved by the wallet automatically to ensure transaction validity\n - friendly missing-balance error handling: a smart UI screen will appear to let users refill their wallets in order to continue with script execution gracefully \n - transport-agnostic solution: the first and only dapp connector API able to build transactions properly on-the-fly, allowing even static QR codes to trigger them on any user wallet. Yes, even multisig and plutus transactions! We really care for RealFi.\n - intelligent Plutus/Native script support: our internal script manager maps every transaction feature with it's plutus/native validator script, up to the point that some function arguments can be inferred automatically making developers life easier with such complex tasks. \n - developer-friendly plutus API: Things like enforcing and handling static input/mint/cert/reward indexes for redeemers is a thing of the past.\n - flexible plutus and multisig signature handling: several options allow you or the wallet to plan worst case scenario for reserving bytes for maximum amount of transaction witnesses.\n - workspace support: our multisig / script based wallet setups are totally integrated on transaction builder API allowing the most flexible and adaptive multisig wallet experience on Cardano ever experienced.\n - smart on-chain transaction features: title, descriptions, tags, parent reference, action-urls, and more are exclusive GameChanger Wallet features since 2021\n - and more...\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n\n"},"[signTxs]: Sign Transactions":{"title":"Sign Transactions","description":"\nGo to function's [documentation page](signTxs.html)\n\n\nSign a list of unsigned or half-signed transactions. These can be multi-signature transactions, or single-user transactions, either case you can use the `multisig` argument to specify a custom strategy (combining self-signing and or multi-signature plugins) to sign, import external and share existing signatures with other peers. The most powerful and flexible transaction multi-signature API available on Cardano.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n\n"},"[submitTxs]: Submit Transactions":{"title":"Submit Transactions","description":"\nGo to function's [documentation page](submitTxs.html)\n\n\nSubmit a list of signed transactions to Cardano blockchain. It can be done in several modes, and modes that can saturate backend services with large number of transactions will self-adapt in runtime in order to protect them while still fulfilling the task.\n\nFull documentation on how to build, sign and submit Transactions <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/transactions/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a> .\n\n"},"[awaitTx]: Await Transaction":{"title":"Await Transaction","description":"\nGo to function's [documentation page](awaitTx.html)\n\n[Deprecated]. Please use `submitTxs` or `await` functions instead. Wait for a transaction to get confirmed on the blockchain.\n"},"[signTx]: Transaction Signing":{"title":"Transaction Signing","description":"\nGo to function's [documentation page](signTx.html)\n\n[Deprecated]. Please use `signTxs` function for simple and multisig transactions instead. Add missing signatures to an unsigned or half-signed transaction with user's private keys\n"},"[submitTx]: Transaction Submit":{"title":"Transaction Submit","description":"\nGo to function's [documentation page](submitTx.html)\n\n[Deprecated]. Please use `submitTxs` function instead. Submit a signed transaction\n"},"[decrypt]: Decrypt message":{"title":"Decrypt message","description":"\nGo to function's [documentation page](decrypt.html)\n\nDecrypt an arbitrary hexadecimal encoded data message from `encryptedMessageHex` string and a password `password` using ChaCha20-Poly1305 algorithm. Returns the hexadecimal encoded decrypted message.\n"},"[encrypt]: Encrypt message":{"title":"Encrypt message","description":"\nGo to function's [documentation page](encrypt.html)\n\nEncrypt an arbitrary hexadecimal encoded data `messageHex` with a password `password` using ChaCha20-Poly1305 algorithm. `salt` and  `nonce` are optional arguments, and will be provided if not set. Returns an encrypted hexadecimal encoded message.\n"},"[verifySignatureWithAddress]: Verify Signature with address (CIP-8)":{"title":"Verify Signature with address (CIP-8)","description":"\nGo to function's [documentation page](verifySignatureWithAddress.html)\n\nVerify CIP-8 signatures against a provided `address`. Compatible with CIP-30 specification.\n"},"[signDataWithAddress]: Data Signing with address (CIP-8)":{"title":"Data Signing with address (CIP-8)","description":"\nGo to function's [documentation page](signDataWithAddress.html)\n\nSign arbitrary data `dataHex` with user's `address` obtaining a CIP-8 COSE1 data signature structure. Compatible with CIP-30 specification.\n"},"[plutusData]: Plutus Data":{"title":"Plutus Data","description":"\nGo to function's [documentation page](plutusData.html)\n\nBuild data structures to be used by plutus scripts (or other purposes) and calculate plutus data hashes\n"},"[plutusScript]: Plutus Script":{"title":"Plutus Script","description":"\nGo to function's [documentation page](plutusScript.html)\n\nImport or compile Plutus Validator Scripts (Cardano Smart Contracts) from built CBOR, or from source code using languages like Helios. \n\nWhen importing an already built Plutus Script providing CBOR, this function will also try to deserialize it and calculate it's hash.\n\nWhen building from source code like with Helios language, you are compiling Plutus Validators on-the-fly during dapp connection, and this have advantages like instant parametrization of built code, and reusability of code-artifacts like datums produced in-language. This can reduce incompatibilities as each language may use their own preferred data type formats. This function also will calculate the hash of the new compiled script.\n\nA common design pattern is to use the produced hash `scriptHashHex` to built smart contract addresses for example, while using the produced CBOR `scriptHex` and script reference CBOR `scriptRefHex` to deploy the contract on-chain or use it inlined on a transaction.\n\n"},"[nativeScript]: Native Script":{"title":"Native Script","description":"\nGo to function's [documentation page](nativeScript.html)\n\nBuild native scripts\n"},"[certificate]: Certificate":{"title":"Certificate","description":"\nGo to function's [documentation page](certificate.html)\n\nBuild certificates\n"},"[buildAddress]: Build Address":{"title":"Build Address","description":"\nGo to function's [documentation page](buildAddress.html)\n\nBuild Cardano Addresses. These addresses are called `Volatile Addresses` and imply a potential loss of user funds because they may become unreachable if the construction technique is not properly persisted or handled. It's recommended to use `saveConfig` and `loadConfig` for creating addresses to ensure users can reconstruct them in the future.\n"},"[deriveKeys]: Derive Keys":{"title":"Derive Keys","description":"\nGo to function's [documentation page](deriveKeys.html)\n\nBulk derive child keys from user's root private key. This are `Volatile Keys`, keys which derivation path may not be persisted or handled properly, implying a potential loss of signability, minting, spending or staking rights. It's recommended to use `saveConfig` and `loadConfig` for creating keys to ensure users can reconstruct them in the future. Resulting object properties will be named after argument indexes or property names\n"},"[getStakingPublicKey]: Get Staking Public Key":{"title":"Get Staking Public Key","description":"\nGo to function's [documentation page](getStakingPublicKey.html)\n\nAsk for current user's wallet staking public key\n"},"[getSpendingPublicKey]: Get Spending Public Key":{"title":"Get Spending Public Key","description":"\nGo to function's [documentation page](getSpendingPublicKey.html)\n\nAsk for current user's wallet spending public key\n"},"[getName]: Get Name":{"title":"Get Name","description":"\nGo to function's [documentation page](getName.html)\n\nAsk for a user's wallet current name\n"},"[getMainIdentity]: Get Main Address Identity":{"title":"Get Main Address Identity","description":"\nGo to function's [documentation page](getMainIdentity.html)\n\nAsk for the identity of the main wallet address. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity\n"},"[getCurrentIdentity]: Get Current Address Identity":{"title":"Get Current Address Identity","description":"\nGo to function's [documentation page](getCurrentIdentity.html)\n\nAsk for the identity of the current wallet address being used. An Address Identity is a deterministic default Native Script generated out of Cardano Shelley Address stake and payment credentials. The only incompatible credentials are Plutus Script Hash credentials, Public Key Hash and Native Script Hash credentials are supported. If an address contains at least one supported credential type, an identity can be generated. For Native Script Hash credentials it's required to save the former Native Scripts on current Workspace to became available for generating the address identity\n"},"[getMainAddress]: Get Main Address":{"title":"Get Main Address","description":"\nGo to function's [documentation page](getMainAddress.html)\n\nAsk for the main wallet address. This is a Shelley Base Address using `accountIndex=0` and `addressIndex=0` for both, `Spend` and `Stake` credentials. This is the legacy default wallet address in GameChanger Wallet\n"},"[getCurrentAddress]: Get Current Address":{"title":"Get Current Address","description":"\nGo to function's [documentation page](getCurrentAddress.html)\n\nAsk for the current wallet address being used\n"},"[getCurrentSlot]: Get Current Slot Number":{"title":"Get Current Slot Number","description":"\nGo to function's [documentation page](getCurrentSlot.html)\n\nFetch from a backend node the current network slot number (seconds)\n"},"[buildFsTxs]: File System Builder (GCFS)":{"title":"File System Builder (GCFS)","description":"\nGo to function's [documentation page](buildFsTxs.html)\n\nBuild a list of transactions that once signed and submitted will create or update an existing fully onchain GameChanger File System (GCFS)\n"},"[searchFs]: File System Search (GCFS)":{"title":"File System Search (GCFS)","description":"\nGo to function's [documentation page](searchFs.html)\n\nFind files across all existing file systems based on a list of search parameters. Result will be a list of file URIs.\n"},"[data]: Data constant":{"title":"Data constant","description":"\nGo to function's [documentation page](data.html)\n\nAllows you to define an arbitrary data constant. Any valid JSON type can be used.\n"},"[enableTerminalMode]: Enable Terminal Mode":{"title":"Enable Terminal Mode","description":"\nGo to function's [documentation page](enableTerminalMode.html)\n\nAdapt your configuration to work better on public terminal devices. Encrypted private keys wont be persisted on browser storage, and wallet types depending on this feature will not be available, among other changes. This action cannot be undone.\n"},"[saveConfig]: Save Wallet Configuration":{"title":"Save Wallet Configuration","description":"\nGo to function's [documentation page](saveConfig.html)\n\n\nSave different workspaces, each with it's own set of keys, addresses, stake delegations and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces [here](https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md)\n\n"},"[loadConfig]: Load Wallet Configuration":{"title":"Load Wallet Configuration","description":"\nGo to function's [documentation page](loadConfig.html)\n\n\nConfigure different workspaces, each with it's own set of keys, addresses, stake delegations, and more.\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n\n"},"[setCurrentWorkspace]: Set Current Workspace":{"title":"Set Current Workspace","description":"\nGo to function's [documentation page](setCurrentWorkspace.html)\n\n\nSet the current wallet Workspace\n\nFull documentation on how to create accounts, multisigs, keys and addresses with Workspaces <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/workspaces/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"> here </a>\n\n"},"[getAddresses]: Get Addresses":{"title":"Get Addresses","description":"\nGo to function's [documentation page](getAddresses.html)\n\nGet Addresses from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map.\n"},"[getPublicKeys]: Get Public Keys":{"title":"Get Public Keys","description":"\nGo to function's [documentation page](getPublicKeys.html)\n\nGet Public Keys from current workspace artifacts stored on wallet local storage, applying a search `filter` and allowing the customization of the resulting key-value map using `keyPattern` to name the keyed results, `offset` and `limit` numbers to paginate results, and `sort` to sort the keys of the resulting map\n"},"[await]: Await condition":{"title":"Await condition","description":"\nGo to function's [documentation page](await.html)\n\nStops the execution of the script until a condition is met\n"}}},"Definitions (3)":{"title":"Definitions (3)","description":"These are all the internal definitions, types and sub-schemas used by functions and GameChanger Wallet GCScript interpreter.","type":"object","properties":{"[common]: Common definitions and types":{"title":"Common definitions and types","description":"\nGo to definition's [documentation page](common.html)\n\nCommon API definitions and types used by functions\n"},"[permissions]: Permissions definitions":{"title":"Permissions definitions","description":"\nGo to definition's [documentation page](permissions.html)\n\nPermissions names, description and properties that are used by functions and GameChanger Wallet GCScript interpreter on every dapp connection.\n"},"[lang]: Inline Scripting Language (ISL)":{"title":"Inline Scripting Language (ISL)","description":"\nGo to definition's [documentation page](lang.html)\n\n\nComplementary programming language to process, format, reuse, link, or pipe GCScript function results with other function arguments, designed to avoid bad practices such as deep nested code and complex code logic expressed in JSON.  \n\nCode functions help you to perform memory, string, arithmetic, cryptographic, encoding, logging, debugging, and other useful secondary operations not supported by primary GCScript API functions.\n\n#### Usage:\n\nAlmost all GCScript function arguments supports ISL. \n\nAll arguments passing a string value starting with `{` and terminating with `}` and containing calls of one or many ISL functions separated with `;` will be interpreted as an ISL code block and will be executed. \n\nThe entire ISL code block will be replaced by it's results prior executing the GCScript function, key behavior that makes GCScript more flexible and dynamic. \n\nOtherwise, if syntax rules are not met on GCScript function arguments, interpreter will use these strings as string values instead of ISL executable code.\n\nISL syntax is a subset of Javascript syntax. It's a deterministic, non-turing complete language, same as GCScript language itself.\n\nGo to <a href=\"https://github.com/GameChangerFinance/gamechanger.wallet/blob/main/docs/gcscript/ISL.md\" target=\"_blank\" rel=\"noopener noreferrer\"> ISL </a>  documentation page for syntax guide and more.\n\n"}}}},"definitions":{"manifest":{"title":"List of all GCScript schema files","type":"array","const":["index.json","api.json","script.json","importAsData.json","importAsScript.json","macro.json","walletGenerator.json","buildTx.json","signTxs.json","submitTxs.json","awaitTx.json","signTx.json","submitTx.json","decrypt.json","encrypt.json","verifySignatureWithAddress.json","signDataWithAddress.json","plutusData.json","plutusScript.json","nativeScript.json","certificate.json","buildAddress.json","deriveKeys.json","getStakingPublicKey.json","getSpendingPublicKey.json","getName.json","getMainIdentity.json","getCurrentIdentity.json","getMainAddress.json","getCurrentAddress.json","getCurrentSlot.json","buildFsTxs.json","searchFs.json","data.json","enableTerminalMode.json","saveConfig.json","loadConfig.json","setCurrentWorkspace.json","getAddresses.json","getPublicKeys.json","await.json","common.json","permissions.json","lang.json"]}}}}